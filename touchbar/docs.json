[
  {
    "Constant" : [

    ],
    "submodules" : [
      "bar",
      "item"
    ],
    "Function" : [
      {
        "doc" : "Creates a new touchbarObject representing a window which displays the Apple Touch Bar.\n\nParameters:\n * None\n\nReturns:\n * the touchbarObject or nil if one could not be created\n\nNotes:\n * The most common reason a touchbarObject cannot be created is if your macOS version is not new enough. Type the following into your Hammerspoon console to check: `require(\"hs._asm.undocumented.touchbar\").supported(true)`.",
        "desc" : "Creates a new touchbarObject representing a window which displays the Apple Touch Bar.",
        "def" : "hs._asm.undocumented.touchbar.new() -> touchbarObject | nil",
        "stripped_doc" : [
          "Creates a new touchbarObject representing a window which displays the Apple Touch Bar.",
          ""
        ],
        "notes" : [
          " * The most common reason a touchbarObject cannot be created is if your macOS version is not new enough. Type the following into your Hammerspoon console to check: `require(\"hs._asm.undocumented.touchbar\").supported(true)`."
        ],
        "signature" : "hs._asm.undocumented.touchbar.new() -> touchbarObject | nil",
        "type" : "Function",
        "returns" : [
          " * the touchbarObject or nil if one could not be created",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the Touch Bar can be used by applications.\n\nParameters:\n * `state` - an optional boolean specifying whether applications can put items into the touch bar (true) or if this is limited only to the system items (false).\n\nReturns:\n * if an argument is provided, returns a boolean indicating whether or not the change was successful; otherwise returns the current value\n\nNotes:\n * Checking the value of this function does not indicate whether or not the machine *can* support the Touch Bar but rather if it *is* supporting the Touch Bar; Use [hs._asm.undocumented.touchbar.supported](#supported) to check whether or not the machine *can* support the Touch Bar.\n\n * Setting this to false will remove all application items from the Touch Bar.",
        "desc" : "Get or set whether or not the Touch Bar can be used by applications.",
        "def" : "hs._asm.undocumented.touchbar.enabled([state]) -> boolean",
        "stripped_doc" : [
          "Get or set whether or not the Touch Bar can be used by applications.",
          ""
        ],
        "notes" : [
          " * Checking the value of this function does not indicate whether or not the machine *can* support the Touch Bar but rather if it *is* supporting the Touch Bar; Use [hs._asm.undocumented.touchbar.supported](#supported) to check whether or not the machine *can* support the Touch Bar.",
          "",
          " * Setting this to false will remove all application items from the Touch Bar."
        ],
        "signature" : "hs._asm.undocumented.touchbar.enabled([state]) -> boolean",
        "type" : "Function",
        "returns" : [
          " * if an argument is provided, returns a boolean indicating whether or not the change was successful; otherwise returns the current value",
          ""
        ],
        "name" : "enabled",
        "parameters" : [
          " * `state` - an optional boolean specifying whether applications can put items into the touch bar (true) or if this is limited only to the system items (false).",
          ""
        ]
      },
      {
        "doc" : "Returns a boolean value indicathing whether or not the Apple Touch Bar is supported on this Macintosh.\n\nParameters:\n * `showLink` - a boolean, default false, specifying whether a dialog prompting the user to download the necessary update is presented if Apple Touch Bar support is not found in the current Operating System.\n\nReturns:\n * true if Apple Touch Bar support is found in the current Operating System or false if it is not.\n\nNotes:\n * the link in the prompt is https:\/\/support.apple.com\/kb\/dl1897",
        "desc" : "Returns a boolean value indicathing whether or not the Apple Touch Bar is supported on this Macintosh.",
        "def" : "hs._asm.undocumented.touchbar.supported([showLink]) -> boolean",
        "stripped_doc" : [
          "Returns a boolean value indicathing whether or not the Apple Touch Bar is supported on this Macintosh.",
          ""
        ],
        "notes" : [
          " * the link in the prompt is https:\/\/support.apple.com\/kb\/dl1897"
        ],
        "signature" : "hs._asm.undocumented.touchbar.supported([showLink]) -> boolean",
        "type" : "Function",
        "returns" : [
          " * true if Apple Touch Bar support is found in the current Operating System or false if it is not.",
          ""
        ],
        "name" : "supported",
        "parameters" : [
          " * `showLink` - a boolean, default false, specifying whether a dialog prompting the user to download the necessary update is presented if Apple Touch Bar support is not found in the current Operating System.",
          ""
        ]
      }
    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "type" : "Module",
    "desc" : "A module to display an on-screen representation of the Apple Touch Bar, even on machines which do not have the touch bar.",
    "Constructor" : [

    ],
    "Field" : [

    ],
    "doc" : "A module to display an on-screen representation of the Apple Touch Bar, even on machines which do not have the touch bar.\n\nThis code is based heavily on code found at https:\/\/github.com\/bikkelbroeders\/TouchBarDemoApp.  Unlike the code found at the provided link, this module only supports displaying the touch bar window on your computer screen - it does not support display on an attached iDevice.\n\nThis module requires that you are running macOS 10.12.1 build 16B2657 or greater.  Most people who have received the 10.12.1 update have an earlier build, which you can check by selecting \"About this Mac\" from the Apple menu and then clicking the mouse pointer on the version number displayed in the dialog box.  If you require an update, you can find it at https:\/\/support.apple.com\/kb\/dl1897.\n\nIf you wish to use this module in an environment where the end-user's machine may not have the correct macOS release version, you should always check the value of `hs._asm.undocumented.touchbar.supported` before trying to create the Touch Bar and provide your own fallback or message.  Failure to do so will cause your code to break to the Hammerspoon Console when you attempt to create and use the Touch Bar.\n\nImage generation code found at https:\/\/github.com\/steventroughtonsmith\/TouchBarScreenshotter\/blob\/master\/TouchBarScreenshotter",
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "Get or set whether or not the Touch Bar can be used by applications.\n\nParameters:\n * `state` - an optional boolean specifying whether applications can put items into the touch bar (true) or if this is limited only to the system items (false).\n\nReturns:\n * if an argument is provided, returns a boolean indicating whether or not the change was successful; otherwise returns the current value\n\nNotes:\n * Checking the value of this function does not indicate whether or not the machine *can* support the Touch Bar but rather if it *is* supporting the Touch Bar; Use [hs._asm.undocumented.touchbar.supported](#supported) to check whether or not the machine *can* support the Touch Bar.\n\n * Setting this to false will remove all application items from the Touch Bar.",
        "desc" : "Get or set whether or not the Touch Bar can be used by applications.",
        "def" : "hs._asm.undocumented.touchbar.enabled([state]) -> boolean",
        "stripped_doc" : [
          "Get or set whether or not the Touch Bar can be used by applications.",
          ""
        ],
        "notes" : [
          " * Checking the value of this function does not indicate whether or not the machine *can* support the Touch Bar but rather if it *is* supporting the Touch Bar; Use [hs._asm.undocumented.touchbar.supported](#supported) to check whether or not the machine *can* support the Touch Bar.",
          "",
          " * Setting this to false will remove all application items from the Touch Bar."
        ],
        "signature" : "hs._asm.undocumented.touchbar.enabled([state]) -> boolean",
        "type" : "Function",
        "returns" : [
          " * if an argument is provided, returns a boolean indicating whether or not the change was successful; otherwise returns the current value",
          ""
        ],
        "name" : "enabled",
        "parameters" : [
          " * `state` - an optional boolean specifying whether applications can put items into the touch bar (true) or if this is limited only to the system items (false).",
          ""
        ]
      },
      {
        "doc" : "Creates a new touchbarObject representing a window which displays the Apple Touch Bar.\n\nParameters:\n * None\n\nReturns:\n * the touchbarObject or nil if one could not be created\n\nNotes:\n * The most common reason a touchbarObject cannot be created is if your macOS version is not new enough. Type the following into your Hammerspoon console to check: `require(\"hs._asm.undocumented.touchbar\").supported(true)`.",
        "desc" : "Creates a new touchbarObject representing a window which displays the Apple Touch Bar.",
        "def" : "hs._asm.undocumented.touchbar.new() -> touchbarObject | nil",
        "stripped_doc" : [
          "Creates a new touchbarObject representing a window which displays the Apple Touch Bar.",
          ""
        ],
        "notes" : [
          " * The most common reason a touchbarObject cannot be created is if your macOS version is not new enough. Type the following into your Hammerspoon console to check: `require(\"hs._asm.undocumented.touchbar\").supported(true)`."
        ],
        "signature" : "hs._asm.undocumented.touchbar.new() -> touchbarObject | nil",
        "type" : "Function",
        "returns" : [
          " * the touchbarObject or nil if one could not be created",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns a boolean value indicathing whether or not the Apple Touch Bar is supported on this Macintosh.\n\nParameters:\n * `showLink` - a boolean, default false, specifying whether a dialog prompting the user to download the necessary update is presented if Apple Touch Bar support is not found in the current Operating System.\n\nReturns:\n * true if Apple Touch Bar support is found in the current Operating System or false if it is not.\n\nNotes:\n * the link in the prompt is https:\/\/support.apple.com\/kb\/dl1897",
        "desc" : "Returns a boolean value indicathing whether or not the Apple Touch Bar is supported on this Macintosh.",
        "def" : "hs._asm.undocumented.touchbar.supported([showLink]) -> boolean",
        "stripped_doc" : [
          "Returns a boolean value indicathing whether or not the Apple Touch Bar is supported on this Macintosh.",
          ""
        ],
        "notes" : [
          " * the link in the prompt is https:\/\/support.apple.com\/kb\/dl1897"
        ],
        "signature" : "hs._asm.undocumented.touchbar.supported([showLink]) -> boolean",
        "type" : "Function",
        "returns" : [
          " * true if Apple Touch Bar support is found in the current Operating System or false if it is not.",
          ""
        ],
        "name" : "supported",
        "parameters" : [
          " * `showLink` - a boolean, default false, specifying whether a dialog prompting the user to download the necessary update is presented if Apple Touch Bar support is not found in the current Operating System.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the touch bar accepts mouse events.\n\nParameters:\n * `state` - an optional boolean which specifies whether the touch bar accepts mouse events (true) or not (false).  Default true.\n\nReturns:\n * if an argument is provided, returns the touchbarObject; otherwise returns the current value.\n\nNotes:\n * This method can be used to prevent mouse clicks in the touch bar from triggering the touch bar buttons.\n * This can be useful when [hs._asm.undocumented.touchbar:movable](#movable) is set to true to prevent accidentally triggering an action.",
        "desc" : "Get or set whether or not the touch bar accepts mouse events.",
        "def" : "hs._asm.undocumented.touchbar:acceptsMouseEvents([state]) -> boolean | touchbarObject",
        "stripped_doc" : [
          "Get or set whether or not the touch bar accepts mouse events.",
          ""
        ],
        "notes" : [
          " * This method can be used to prevent mouse clicks in the touch bar from triggering the touch bar buttons.",
          " * This can be useful when [hs._asm.undocumented.touchbar:movable](#movable) is set to true to prevent accidentally triggering an action."
        ],
        "signature" : "hs._asm.undocumented.touchbar:acceptsMouseEvents([state]) -> boolean | touchbarObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarObject; otherwise returns the current value.",
          ""
        ],
        "name" : "acceptsMouseEvents",
        "parameters" : [
          " * `state` - an optional boolean which specifies whether the touch bar accepts mouse events (true) or not (false).  Default true.",
          ""
        ]
      },
      {
        "doc" : "Moves the touch bar window so that it is centered directly underneath the mouse pointer.\n\nParameters:\n * None\n\nReturns:\n * the touchbarObject\n\nNotes:\n * This method mimics the display location as set by the sample code this module is based on.  See https:\/\/github.com\/bikkelbroeders\/TouchBarDemoApp for more information.\n * The touch bar position will be adjusted so that it is fully visible on the screen even if this moves it left or right from the mouse's current position.",
        "desc" : "Moves the touch bar window so that it is centered directly underneath the mouse pointer.",
        "def" : "hs._asm.undocumented.touchbar:atMousePosition() -> touchbarObject",
        "stripped_doc" : [
          "Moves the touch bar window so that it is centered directly underneath the mouse pointer.",
          ""
        ],
        "notes" : [
          " * This method mimics the display location as set by the sample code this module is based on.  See https:\/\/github.com\/bikkelbroeders\/TouchBarDemoApp for more information.",
          " * The touch bar position will be adjusted so that it is fully visible on the screen even if this moves it left or right from the mouse's current position."
        ],
        "signature" : "hs._asm.undocumented.touchbar:atMousePosition() -> touchbarObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarObject",
          ""
        ],
        "name" : "atMousePosition",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the background color for the touch bar window.\n\nParameters:\n * `color` - an optional color table as defined in `hs.drawing.color` specifying the background color for the touch bar window.  Defaults to black, i.e. `{ white = 0.0, alpha = 1.0 }`.\n\nReturns:\n * if an argument is provided, returns the touchbarObject; otherwise returns the current value.\n\nNotes:\n * The visual effect of this method is to change the border color around the touch bar -- the touch bar itself remains the color as defined by the application which is providing the current touch bar items for display.",
        "desc" : "Get or set the background color for the touch bar window.",
        "def" : "hs._asm.undocumented.touchbar:backgroundColor([color]) -> color | touchbarObject",
        "stripped_doc" : [
          "Get or set the background color for the touch bar window.",
          ""
        ],
        "notes" : [
          " * The visual effect of this method is to change the border color around the touch bar -- the touch bar itself remains the color as defined by the application which is providing the current touch bar items for display."
        ],
        "signature" : "hs._asm.undocumented.touchbar:backgroundColor([color]) -> color | touchbarObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarObject; otherwise returns the current value.",
          ""
        ],
        "name" : "backgroundColor",
        "parameters" : [
          " * `color` - an optional color table as defined in `hs.drawing.color` specifying the background color for the touch bar window.  Defaults to black, i.e. `{ white = 0.0, alpha = 1.0 }`.",
          ""
        ]
      },
      {
        "doc" : "Moves the touch bar window to the top or bottom center of the main screen.\n\nParameters:\n * `top` - an optional boolean, default false, specifying whether the touch bar should be centered at the top (true) of the screen or at the bottom (false).\n\nReturns:\n * the touchbarObject",
        "desc" : "Moves the touch bar window to the top or bottom center of the main screen.",
        "def" : "hs._asm.undocumented.touchbar:centered([top]) -> touchbarObject",
        "stripped_doc" : [
          "Moves the touch bar window to the top or bottom center of the main screen.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar:centered([top]) -> touchbarObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarObject"
        ],
        "name" : "centered",
        "parameters" : [
          " * `top` - an optional boolean, default false, specifying whether the touch bar should be centered at the top (true) of the screen or at the bottom (false).",
          ""
        ]
      },
      {
        "doc" : "Gets the frame of the touch bar window\n\nParameters:\n * None\n\nReturns:\n * a frame table with key-value pairs specifying the top left corner of the touch bar window and its width and height.\n\nNotes:\n * A frame table is a table with at least `x`, `y`, `h` and `w` key-value pairs which specify the coordinates on the computer screen of the window and its width (w) and height(h).\n * This allows you to get the frame so that you can include its height and width in calculations - it does not allow you to change the size of the touch bar window itself.",
        "desc" : "Gets the frame of the touch bar window",
        "def" : "hs._asm.undocumented.touchbar:getFrame() -> table",
        "stripped_doc" : [
          "Gets the frame of the touch bar window",
          ""
        ],
        "notes" : [
          " * A frame table is a table with at least `x`, `y`, `h` and `w` key-value pairs which specify the coordinates on the computer screen of the window and its width (w) and height(h).",
          " * This allows you to get the frame so that you can include its height and width in calculations - it does not allow you to change the size of the touch bar window itself."
        ],
        "signature" : "hs._asm.undocumented.touchbar:getFrame() -> table",
        "type" : "Method",
        "returns" : [
          " * a frame table with key-value pairs specifying the top left corner of the touch bar window and its width and height.",
          ""
        ],
        "name" : "getFrame",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Display the touch bar window with an optional fade-out delay.\n\nParameters:\n * `duration` - an optional number, default 0.0, specifying the fade-out time for the touch bar window.\n\nReturns:\n * the touchbarObject\n\nNotes:\n * This method does nothing if the window is already hidden.\n * The value used in the sample code referenced in the module header is 0.1.",
        "desc" : "Display the touch bar window with an optional fade-out delay.",
        "def" : "hs._asm.undocumented.touchbar:hide([duration]) -> touchbarObject",
        "stripped_doc" : [
          "Display the touch bar window with an optional fade-out delay.",
          ""
        ],
        "notes" : [
          " * This method does nothing if the window is already hidden.",
          " * The value used in the sample code referenced in the module header is 0.1."
        ],
        "signature" : "hs._asm.undocumented.touchbar:hide([duration]) -> touchbarObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarObject",
          ""
        ],
        "name" : "hide",
        "parameters" : [
          " * `duration` - an optional number, default 0.0, specifying the fade-out time for the touch bar window.",
          ""
        ]
      },
      {
        "doc" : "Get or set the alpha value for the touch bar window when the mouse is not hovering over it.\n\nParameters:\n * alpha - an optional number between 0.0 and 1.0 inclusive specifying the alpha value for the touch bar window when the mouse is not over it.  Defaults to 0.5.\n\nReturns:\n * if a value is provided, returns the touchbarObject; otherwise returns the current value",
        "desc" : "Get or set the alpha value for the touch bar window when the mouse is not hovering over it.",
        "def" : "hs._asm.undocumented.touchbar:inactiveAlpha([alpha]) -> number | touchbarObject",
        "stripped_doc" : [
          "Get or set the alpha value for the touch bar window when the mouse is not hovering over it.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar:inactiveAlpha([alpha]) -> number | touchbarObject",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the touchbarObject; otherwise returns the current value"
        ],
        "name" : "inactiveAlpha",
        "parameters" : [
          " * alpha - an optional number between 0.0 and 1.0 inclusive specifying the alpha value for the touch bar window when the mouse is not over it.  Defaults to 0.5.",
          ""
        ]
      },
      {
        "doc" : "Returns a boolean indicating whether or not the touch bar window is current visible.\n\nParameters:\n * None\n\nReturns:\n * a boolean specifying whether the touch bar window is visible (true) or not (false).",
        "desc" : "Returns a boolean indicating whether or not the touch bar window is current visible.",
        "def" : "hs._asm.undocumented.touchbar:isVisible() -> boolean",
        "stripped_doc" : [
          "Returns a boolean indicating whether or not the touch bar window is current visible.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar:isVisible() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean specifying whether the touch bar window is visible (true) or not (false)."
        ],
        "name" : "isVisible",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the touch bar window is movable by clicking on it and holding down the mouse button while moving the mouse.\n\nParameters:\n * `state` - an optional boolean which specifies whether the touch bar window is movable (true) or not (false).  Default false.\n\nReturns:\n * if an argument is provided, returns the touchbarObject; otherwise returns the current value.\n\nNotes:\n * While the touch bar is movable, actions which require moving the mouse while clicking on the touch bar are not accessible.\n * See also [hs._asm.undocumented.touchbar:acceptsMouseEvents](#acceptsMouseEvents).",
        "desc" : "Get or set whether or not the touch bar window is movable by clicking on it and holding down the mouse button while moving the mouse.",
        "def" : "hs._asm.undocumented.touchbar:movable([state]) -> boolean | touchbarObject",
        "stripped_doc" : [
          "Get or set whether or not the touch bar window is movable by clicking on it and holding down the mouse button while moving the mouse.",
          ""
        ],
        "notes" : [
          " * While the touch bar is movable, actions which require moving the mouse while clicking on the touch bar are not accessible.",
          " * See also [hs._asm.undocumented.touchbar:acceptsMouseEvents](#acceptsMouseEvents)."
        ],
        "signature" : "hs._asm.undocumented.touchbar:movable([state]) -> boolean | touchbarObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarObject; otherwise returns the current value.",
          ""
        ],
        "name" : "movable",
        "parameters" : [
          " * `state` - an optional boolean which specifies whether the touch bar window is movable (true) or not (false).  Default false.",
          ""
        ]
      },
      {
        "doc" : "Sets the callback function for the touch bar window.\n\nParameters:\n * `fn` - a function to set as the callback for the touch bar window, or nil to remove the existing callback function.\n\nReturns:\n * the touchbarObject\n\nNotes:\n * The function should expect 2 arguments and return none.  The arguments will be one of the following:\n\n   * obj, \"didEnter\" - indicates that the mouse pointer has entered the window containing the touch bar\n     * `obj`     - the touchbarObject the callback is for\n     * `message` - the message to the callback, in this case \"didEnter\"\n\n   * obj, \"didExit\" - indicates that the mouse pointer has exited the window containing the touch bar\n     * `obj`     - the touchbarObject the callback is for\n     * `message` - the message to the callback, in this case \"didEnter\"",
        "desc" : "Sets the callback function for the touch bar window.",
        "def" : "hs._asm.undocumented.touchbar:setCallback(fn | nil) -> touchbarObject",
        "stripped_doc" : [
          "Sets the callback function for the touch bar window.",
          ""
        ],
        "notes" : [
          " * The function should expect 2 arguments and return none.  The arguments will be one of the following:",
          "",
          "   * obj, \"didEnter\" - indicates that the mouse pointer has entered the window containing the touch bar",
          "     * `obj`     - the touchbarObject the callback is for",
          "     * `message` - the message to the callback, in this case \"didEnter\"",
          "",
          "   * obj, \"didExit\" - indicates that the mouse pointer has exited the window containing the touch bar",
          "     * `obj`     - the touchbarObject the callback is for",
          "     * `message` - the message to the callback, in this case \"didEnter\""
        ],
        "signature" : "hs._asm.undocumented.touchbar:setCallback(fn | nil) -> touchbarObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarObject",
          ""
        ],
        "name" : "setCallback",
        "parameters" : [
          " * `fn` - a function to set as the callback for the touch bar window, or nil to remove the existing callback function.",
          ""
        ]
      },
      {
        "doc" : "Display the touch bar window with an optional fade-in delay.\n\nParameters:\n * `duration` - an optional number, default 0.0, specifying the fade-in time for the touch bar window.\n\nReturns:\n * the touchbarObject\n\nNotes:\n * This method does nothing if the window is already visible.",
        "desc" : "Display the touch bar window with an optional fade-in delay.",
        "def" : "hs._asm.undocumented.touchbar:show([duration]) -> touchbarObject",
        "stripped_doc" : [
          "Display the touch bar window with an optional fade-in delay.",
          ""
        ],
        "notes" : [
          " * This method does nothing if the window is already visible."
        ],
        "signature" : "hs._asm.undocumented.touchbar:show([duration]) -> touchbarObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarObject",
          ""
        ],
        "name" : "show",
        "parameters" : [
          " * `duration` - an optional number, default 0.0, specifying the fade-in time for the touch bar window.",
          ""
        ]
      },
      {
        "doc" : "Toggle's the visibility of the touch bar window.\n\nParameters:\n * `duration` - an optional number, default 0.0, specifying the fade-in\/out time when changing the visibility of the touch bar window.\n\nReturns:\n * the touchbarObject",
        "desc" : "Toggle's the visibility of the touch bar window.",
        "def" : "hs._asm.undocumented.touchbar:toggle([duration]) -> touchbarObject",
        "stripped_doc" : [
          "Toggle's the visibility of the touch bar window.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar:toggle([duration]) -> touchbarObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarObject"
        ],
        "name" : "toggle",
        "parameters" : [
          " * `duration` - an optional number, default 0.0, specifying the fade-in\/out time when changing the visibility of the touch bar window.",
          ""
        ]
      },
      {
        "doc" : "Get or set the top-left of the touch bar window.\n\nParameters:\n * `point` - an optional table specifying where the top left of the touch bar window should be moved to.\n\nReturns:\n * if a value is provided, returns the touchbarObject; otherwise returns the current value.\n\nNotes:\n * A point table is a table with at least `x` and `y` key-value pairs which specify the coordinates on the computer screen where the window should be moved to.  Hammerspoon considers the upper left corner of the primary screen to be { x = 0.0, y = 0.0 }.",
        "desc" : "Get or set the top-left of the touch bar window.",
        "def" : "hs._asm.undocumented.touchbar:topLeft([point]) -> table | touchbarObject",
        "stripped_doc" : [
          "Get or set the top-left of the touch bar window.",
          ""
        ],
        "notes" : [
          " * A point table is a table with at least `x` and `y` key-value pairs which specify the coordinates on the computer screen where the window should be moved to.  Hammerspoon considers the upper left corner of the primary screen to be { x = 0.0, y = 0.0 }."
        ],
        "signature" : "hs._asm.undocumented.touchbar:topLeft([point]) -> table | touchbarObject",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the touchbarObject; otherwise returns the current value.",
          ""
        ],
        "name" : "topLeft",
        "parameters" : [
          " * `point` - an optional table specifying where the top left of the touch bar window should be moved to.",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "doc" : "Toggle's the visibility of the touch bar window.\n\nParameters:\n * `duration` - an optional number, default 0.0, specifying the fade-in\/out time when changing the visibility of the touch bar window.\n\nReturns:\n * the touchbarObject",
        "desc" : "Toggle's the visibility of the touch bar window.",
        "def" : "hs._asm.undocumented.touchbar:toggle([duration]) -> touchbarObject",
        "stripped_doc" : [
          "Toggle's the visibility of the touch bar window.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar:toggle([duration]) -> touchbarObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarObject"
        ],
        "name" : "toggle",
        "parameters" : [
          " * `duration` - an optional number, default 0.0, specifying the fade-in\/out time when changing the visibility of the touch bar window.",
          ""
        ]
      },
      {
        "doc" : "Moves the touch bar window so that it is centered directly underneath the mouse pointer.\n\nParameters:\n * None\n\nReturns:\n * the touchbarObject\n\nNotes:\n * This method mimics the display location as set by the sample code this module is based on.  See https:\/\/github.com\/bikkelbroeders\/TouchBarDemoApp for more information.\n * The touch bar position will be adjusted so that it is fully visible on the screen even if this moves it left or right from the mouse's current position.",
        "desc" : "Moves the touch bar window so that it is centered directly underneath the mouse pointer.",
        "def" : "hs._asm.undocumented.touchbar:atMousePosition() -> touchbarObject",
        "stripped_doc" : [
          "Moves the touch bar window so that it is centered directly underneath the mouse pointer.",
          ""
        ],
        "notes" : [
          " * This method mimics the display location as set by the sample code this module is based on.  See https:\/\/github.com\/bikkelbroeders\/TouchBarDemoApp for more information.",
          " * The touch bar position will be adjusted so that it is fully visible on the screen even if this moves it left or right from the mouse's current position."
        ],
        "signature" : "hs._asm.undocumented.touchbar:atMousePosition() -> touchbarObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarObject",
          ""
        ],
        "name" : "atMousePosition",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Moves the touch bar window to the top or bottom center of the main screen.\n\nParameters:\n * `top` - an optional boolean, default false, specifying whether the touch bar should be centered at the top (true) of the screen or at the bottom (false).\n\nReturns:\n * the touchbarObject",
        "desc" : "Moves the touch bar window to the top or bottom center of the main screen.",
        "def" : "hs._asm.undocumented.touchbar:centered([top]) -> touchbarObject",
        "stripped_doc" : [
          "Moves the touch bar window to the top or bottom center of the main screen.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar:centered([top]) -> touchbarObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarObject"
        ],
        "name" : "centered",
        "parameters" : [
          " * `top` - an optional boolean, default false, specifying whether the touch bar should be centered at the top (true) of the screen or at the bottom (false).",
          ""
        ]
      },
      {
        "doc" : "Display the touch bar window with an optional fade-in delay.\n\nParameters:\n * `duration` - an optional number, default 0.0, specifying the fade-in time for the touch bar window.\n\nReturns:\n * the touchbarObject\n\nNotes:\n * This method does nothing if the window is already visible.",
        "desc" : "Display the touch bar window with an optional fade-in delay.",
        "def" : "hs._asm.undocumented.touchbar:show([duration]) -> touchbarObject",
        "stripped_doc" : [
          "Display the touch bar window with an optional fade-in delay.",
          ""
        ],
        "notes" : [
          " * This method does nothing if the window is already visible."
        ],
        "signature" : "hs._asm.undocumented.touchbar:show([duration]) -> touchbarObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarObject",
          ""
        ],
        "name" : "show",
        "parameters" : [
          " * `duration` - an optional number, default 0.0, specifying the fade-in time for the touch bar window.",
          ""
        ]
      },
      {
        "doc" : "Display the touch bar window with an optional fade-out delay.\n\nParameters:\n * `duration` - an optional number, default 0.0, specifying the fade-out time for the touch bar window.\n\nReturns:\n * the touchbarObject\n\nNotes:\n * This method does nothing if the window is already hidden.\n * The value used in the sample code referenced in the module header is 0.1.",
        "desc" : "Display the touch bar window with an optional fade-out delay.",
        "def" : "hs._asm.undocumented.touchbar:hide([duration]) -> touchbarObject",
        "stripped_doc" : [
          "Display the touch bar window with an optional fade-out delay.",
          ""
        ],
        "notes" : [
          " * This method does nothing if the window is already hidden.",
          " * The value used in the sample code referenced in the module header is 0.1."
        ],
        "signature" : "hs._asm.undocumented.touchbar:hide([duration]) -> touchbarObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarObject",
          ""
        ],
        "name" : "hide",
        "parameters" : [
          " * `duration` - an optional number, default 0.0, specifying the fade-out time for the touch bar window.",
          ""
        ]
      },
      {
        "doc" : "Get or set the top-left of the touch bar window.\n\nParameters:\n * `point` - an optional table specifying where the top left of the touch bar window should be moved to.\n\nReturns:\n * if a value is provided, returns the touchbarObject; otherwise returns the current value.\n\nNotes:\n * A point table is a table with at least `x` and `y` key-value pairs which specify the coordinates on the computer screen where the window should be moved to.  Hammerspoon considers the upper left corner of the primary screen to be { x = 0.0, y = 0.0 }.",
        "desc" : "Get or set the top-left of the touch bar window.",
        "def" : "hs._asm.undocumented.touchbar:topLeft([point]) -> table | touchbarObject",
        "stripped_doc" : [
          "Get or set the top-left of the touch bar window.",
          ""
        ],
        "notes" : [
          " * A point table is a table with at least `x` and `y` key-value pairs which specify the coordinates on the computer screen where the window should be moved to.  Hammerspoon considers the upper left corner of the primary screen to be { x = 0.0, y = 0.0 }."
        ],
        "signature" : "hs._asm.undocumented.touchbar:topLeft([point]) -> table | touchbarObject",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the touchbarObject; otherwise returns the current value.",
          ""
        ],
        "name" : "topLeft",
        "parameters" : [
          " * `point` - an optional table specifying where the top left of the touch bar window should be moved to.",
          ""
        ]
      },
      {
        "doc" : "Gets the frame of the touch bar window\n\nParameters:\n * None\n\nReturns:\n * a frame table with key-value pairs specifying the top left corner of the touch bar window and its width and height.\n\nNotes:\n * A frame table is a table with at least `x`, `y`, `h` and `w` key-value pairs which specify the coordinates on the computer screen of the window and its width (w) and height(h).\n * This allows you to get the frame so that you can include its height and width in calculations - it does not allow you to change the size of the touch bar window itself.",
        "desc" : "Gets the frame of the touch bar window",
        "def" : "hs._asm.undocumented.touchbar:getFrame() -> table",
        "stripped_doc" : [
          "Gets the frame of the touch bar window",
          ""
        ],
        "notes" : [
          " * A frame table is a table with at least `x`, `y`, `h` and `w` key-value pairs which specify the coordinates on the computer screen of the window and its width (w) and height(h).",
          " * This allows you to get the frame so that you can include its height and width in calculations - it does not allow you to change the size of the touch bar window itself."
        ],
        "signature" : "hs._asm.undocumented.touchbar:getFrame() -> table",
        "type" : "Method",
        "returns" : [
          " * a frame table with key-value pairs specifying the top left corner of the touch bar window and its width and height.",
          ""
        ],
        "name" : "getFrame",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns a boolean indicating whether or not the touch bar window is current visible.\n\nParameters:\n * None\n\nReturns:\n * a boolean specifying whether the touch bar window is visible (true) or not (false).",
        "desc" : "Returns a boolean indicating whether or not the touch bar window is current visible.",
        "def" : "hs._asm.undocumented.touchbar:isVisible() -> boolean",
        "stripped_doc" : [
          "Returns a boolean indicating whether or not the touch bar window is current visible.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar:isVisible() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean specifying whether the touch bar window is visible (true) or not (false)."
        ],
        "name" : "isVisible",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the alpha value for the touch bar window when the mouse is not hovering over it.\n\nParameters:\n * alpha - an optional number between 0.0 and 1.0 inclusive specifying the alpha value for the touch bar window when the mouse is not over it.  Defaults to 0.5.\n\nReturns:\n * if a value is provided, returns the touchbarObject; otherwise returns the current value",
        "desc" : "Get or set the alpha value for the touch bar window when the mouse is not hovering over it.",
        "def" : "hs._asm.undocumented.touchbar:inactiveAlpha([alpha]) -> number | touchbarObject",
        "stripped_doc" : [
          "Get or set the alpha value for the touch bar window when the mouse is not hovering over it.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar:inactiveAlpha([alpha]) -> number | touchbarObject",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the touchbarObject; otherwise returns the current value"
        ],
        "name" : "inactiveAlpha",
        "parameters" : [
          " * alpha - an optional number between 0.0 and 1.0 inclusive specifying the alpha value for the touch bar window when the mouse is not over it.  Defaults to 0.5.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the touch bar window is movable by clicking on it and holding down the mouse button while moving the mouse.\n\nParameters:\n * `state` - an optional boolean which specifies whether the touch bar window is movable (true) or not (false).  Default false.\n\nReturns:\n * if an argument is provided, returns the touchbarObject; otherwise returns the current value.\n\nNotes:\n * While the touch bar is movable, actions which require moving the mouse while clicking on the touch bar are not accessible.\n * See also [hs._asm.undocumented.touchbar:acceptsMouseEvents](#acceptsMouseEvents).",
        "desc" : "Get or set whether or not the touch bar window is movable by clicking on it and holding down the mouse button while moving the mouse.",
        "def" : "hs._asm.undocumented.touchbar:movable([state]) -> boolean | touchbarObject",
        "stripped_doc" : [
          "Get or set whether or not the touch bar window is movable by clicking on it and holding down the mouse button while moving the mouse.",
          ""
        ],
        "notes" : [
          " * While the touch bar is movable, actions which require moving the mouse while clicking on the touch bar are not accessible.",
          " * See also [hs._asm.undocumented.touchbar:acceptsMouseEvents](#acceptsMouseEvents)."
        ],
        "signature" : "hs._asm.undocumented.touchbar:movable([state]) -> boolean | touchbarObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarObject; otherwise returns the current value.",
          ""
        ],
        "name" : "movable",
        "parameters" : [
          " * `state` - an optional boolean which specifies whether the touch bar window is movable (true) or not (false).  Default false.",
          ""
        ]
      },
      {
        "doc" : "Get or set whether or not the touch bar accepts mouse events.\n\nParameters:\n * `state` - an optional boolean which specifies whether the touch bar accepts mouse events (true) or not (false).  Default true.\n\nReturns:\n * if an argument is provided, returns the touchbarObject; otherwise returns the current value.\n\nNotes:\n * This method can be used to prevent mouse clicks in the touch bar from triggering the touch bar buttons.\n * This can be useful when [hs._asm.undocumented.touchbar:movable](#movable) is set to true to prevent accidentally triggering an action.",
        "desc" : "Get or set whether or not the touch bar accepts mouse events.",
        "def" : "hs._asm.undocumented.touchbar:acceptsMouseEvents([state]) -> boolean | touchbarObject",
        "stripped_doc" : [
          "Get or set whether or not the touch bar accepts mouse events.",
          ""
        ],
        "notes" : [
          " * This method can be used to prevent mouse clicks in the touch bar from triggering the touch bar buttons.",
          " * This can be useful when [hs._asm.undocumented.touchbar:movable](#movable) is set to true to prevent accidentally triggering an action."
        ],
        "signature" : "hs._asm.undocumented.touchbar:acceptsMouseEvents([state]) -> boolean | touchbarObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarObject; otherwise returns the current value.",
          ""
        ],
        "name" : "acceptsMouseEvents",
        "parameters" : [
          " * `state` - an optional boolean which specifies whether the touch bar accepts mouse events (true) or not (false).  Default true.",
          ""
        ]
      },
      {
        "doc" : "Get or set the background color for the touch bar window.\n\nParameters:\n * `color` - an optional color table as defined in `hs.drawing.color` specifying the background color for the touch bar window.  Defaults to black, i.e. `{ white = 0.0, alpha = 1.0 }`.\n\nReturns:\n * if an argument is provided, returns the touchbarObject; otherwise returns the current value.\n\nNotes:\n * The visual effect of this method is to change the border color around the touch bar -- the touch bar itself remains the color as defined by the application which is providing the current touch bar items for display.",
        "desc" : "Get or set the background color for the touch bar window.",
        "def" : "hs._asm.undocumented.touchbar:backgroundColor([color]) -> color | touchbarObject",
        "stripped_doc" : [
          "Get or set the background color for the touch bar window.",
          ""
        ],
        "notes" : [
          " * The visual effect of this method is to change the border color around the touch bar -- the touch bar itself remains the color as defined by the application which is providing the current touch bar items for display."
        ],
        "signature" : "hs._asm.undocumented.touchbar:backgroundColor([color]) -> color | touchbarObject",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarObject; otherwise returns the current value.",
          ""
        ],
        "name" : "backgroundColor",
        "parameters" : [
          " * `color` - an optional color table as defined in `hs.drawing.color` specifying the background color for the touch bar window.  Defaults to black, i.e. `{ white = 0.0, alpha = 1.0 }`.",
          ""
        ]
      },
      {
        "doc" : "Sets the callback function for the touch bar window.\n\nParameters:\n * `fn` - a function to set as the callback for the touch bar window, or nil to remove the existing callback function.\n\nReturns:\n * the touchbarObject\n\nNotes:\n * The function should expect 2 arguments and return none.  The arguments will be one of the following:\n\n   * obj, \"didEnter\" - indicates that the mouse pointer has entered the window containing the touch bar\n     * `obj`     - the touchbarObject the callback is for\n     * `message` - the message to the callback, in this case \"didEnter\"\n\n   * obj, \"didExit\" - indicates that the mouse pointer has exited the window containing the touch bar\n     * `obj`     - the touchbarObject the callback is for\n     * `message` - the message to the callback, in this case \"didEnter\"",
        "desc" : "Sets the callback function for the touch bar window.",
        "def" : "hs._asm.undocumented.touchbar:setCallback(fn | nil) -> touchbarObject",
        "stripped_doc" : [
          "Sets the callback function for the touch bar window.",
          ""
        ],
        "notes" : [
          " * The function should expect 2 arguments and return none.  The arguments will be one of the following:",
          "",
          "   * obj, \"didEnter\" - indicates that the mouse pointer has entered the window containing the touch bar",
          "     * `obj`     - the touchbarObject the callback is for",
          "     * `message` - the message to the callback, in this case \"didEnter\"",
          "",
          "   * obj, \"didExit\" - indicates that the mouse pointer has exited the window containing the touch bar",
          "     * `obj`     - the touchbarObject the callback is for",
          "     * `message` - the message to the callback, in this case \"didEnter\""
        ],
        "signature" : "hs._asm.undocumented.touchbar:setCallback(fn | nil) -> touchbarObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarObject",
          ""
        ],
        "name" : "setCallback",
        "parameters" : [
          " * `fn` - a function to set as the callback for the touch bar window, or nil to remove the existing callback function.",
          ""
        ]
      }
    ],
    "name" : "hs._asm.undocumented.touchbar"
  },
  {
    "Constant" : [
      {
        "doc" : "A table of key-value pairs whose values represent built in touch bar items which can be used to adjust the layout of the bar object when it is being presented.\n\nCurrently the following keys are defined:\n * smallSpace      - provides a small space between items\n * largeSpace      - provides a larger space between items\n * flexibleSpace   - provides an expanding\/contracting space between items\n\nThe following is ignored for modally displayed bars, so it's effects are still being evaluated; documentation will be updated when nested bars can be tested and more fully understood within the context of the Hammerspoon console and webview.\n * otherItemsProxy - provides a place for nested bars to display items",
        "desc" : "A table of key-value pairs whose values represent built in touch bar items which can be used to adjust the layout of the bar object when it is being presented.",
        "def" : "hs._asm.undocumented.touchbar.bar.builtInIdentifiers[]",
        "stripped_doc" : [
          "A table of key-value pairs whose values represent built in touch bar items which can be used to adjust the layout of the bar object when it is being presented.",
          "",
          "Currently the following keys are defined:",
          " * smallSpace      - provides a small space between items",
          " * largeSpace      - provides a larger space between items",
          " * flexibleSpace   - provides an expanding\/contracting space between items",
          "",
          "The following is ignored for modally displayed bars, so it's effects are still being evaluated; documentation will be updated when nested bars can be tested and more fully understood within the context of the Hammerspoon console and webview.",
          " * otherItemsProxy - provides a place for nested bars to display items"
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.bar.builtInIdentifiers[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "builtInIdentifiers",
        "parameters" : [

        ]
      }
    ],
    "submodules" : [

    ],
    "Function" : [
      {
        "doc" : "(See Notes) Toggle's the Touch Bar customization panel for the Hammerspoon application\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * At present this function is not useful; it is expected to be more useful when Hammerspoon specific views can provide their own touchbars.\n\n * The customization panel allows modification of the current bar visible for the macOS application triggering the request within that applications resolver chain -- as such, it can only modify touchbar's attached to the Hammerspoon console or webview objects.\n * The customization panel cannot modify modally displayed bar objects.",
        "desc" : "(See Notes) Toggle's the Touch Bar customization panel for the Hammerspoon application",
        "def" : "hs._asm.undocumented.touchbar.bar.toggleCustomization() -> None",
        "stripped_doc" : [
          "(See Notes) Toggle's the Touch Bar customization panel for the Hammerspoon application",
          ""
        ],
        "notes" : [
          " * At present this function is not useful; it is expected to be more useful when Hammerspoon specific views can provide their own touchbars.",
          "",
          " * The customization panel allows modification of the current bar visible for the macOS application triggering the request within that applications resolver chain -- as such, it can only modify touchbar's attached to the Hammerspoon console or webview objects.",
          " * The customization panel cannot modify modally displayed bar objects."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar.toggleCustomization() -> None",
        "type" : "Function",
        "returns" : [
          " * None",
          ""
        ],
        "name" : "toggleCustomization",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "type" : "Module",
    "desc" : "This module is used to create and manipulate bar objects which can be displayed in the Touch Bar of new Macintosh Pro laptops or with the virtual Touch Bar provided by `hs._asm.undocumented.touchbar`.",
    "Constructor" : [
      {
        "doc" : "Creates a new bar object\n\nParameters:\n * None\n\nReturns:\n * a new bar object",
        "desc" : "Creates a new bar object",
        "def" : "hs._asm.undocumented.touchbar.bar.new() -> barObject",
        "stripped_doc" : [
          "Creates a new bar object",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.bar.new() -> barObject",
        "type" : "Constructor",
        "returns" : [
          " * a new bar object"
        ],
        "name" : "new",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "Field" : [

    ],
    "doc" : "This module is used to create and manipulate bar objects which can be displayed in the Touch Bar of new Macintosh Pro laptops or with the virtual Touch Bar provided by `hs._asm.undocumented.touchbar`.\n\nAt present, bar objects can be presented modally under Hammerspoon control but cannot be attached directly to the Hammerspoon console or webview objects to dynamically appear as application focus changes; this is expected to change in the future.\n\nThis module requires macOS 10.12.2 or later. Some of the methods (identified in their notes) in this module use undocumented functions and\/or framework methods and are not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6.\n\nThis module is very experimental and is still under development, so the exact functions and methods are subject to change without notice.\n\nTODO:\n * touch bars for the console and webviews\n * `isVisible` is KVO, so add a watcher\n * rework orginization so bar in root, current root in virtual",
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "A table of key-value pairs whose values represent built in touch bar items which can be used to adjust the layout of the bar object when it is being presented.\n\nCurrently the following keys are defined:\n * smallSpace      - provides a small space between items\n * largeSpace      - provides a larger space between items\n * flexibleSpace   - provides an expanding\/contracting space between items\n\nThe following is ignored for modally displayed bars, so it's effects are still being evaluated; documentation will be updated when nested bars can be tested and more fully understood within the context of the Hammerspoon console and webview.\n * otherItemsProxy - provides a place for nested bars to display items",
        "desc" : "A table of key-value pairs whose values represent built in touch bar items which can be used to adjust the layout of the bar object when it is being presented.",
        "def" : "hs._asm.undocumented.touchbar.bar.builtInIdentifiers[]",
        "stripped_doc" : [
          "A table of key-value pairs whose values represent built in touch bar items which can be used to adjust the layout of the bar object when it is being presented.",
          "",
          "Currently the following keys are defined:",
          " * smallSpace      - provides a small space between items",
          " * largeSpace      - provides a larger space between items",
          " * flexibleSpace   - provides an expanding\/contracting space between items",
          "",
          "The following is ignored for modally displayed bars, so it's effects are still being evaluated; documentation will be updated when nested bars can be tested and more fully understood within the context of the Hammerspoon console and webview.",
          " * otherItemsProxy - provides a place for nested bars to display items"
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.bar.builtInIdentifiers[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "builtInIdentifiers",
        "parameters" : [

        ]
      },
      {
        "doc" : "(See Notes) Toggle's the Touch Bar customization panel for the Hammerspoon application\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * At present this function is not useful; it is expected to be more useful when Hammerspoon specific views can provide their own touchbars.\n\n * The customization panel allows modification of the current bar visible for the macOS application triggering the request within that applications resolver chain -- as such, it can only modify touchbar's attached to the Hammerspoon console or webview objects.\n * The customization panel cannot modify modally displayed bar objects.",
        "desc" : "(See Notes) Toggle's the Touch Bar customization panel for the Hammerspoon application",
        "def" : "hs._asm.undocumented.touchbar.bar.toggleCustomization() -> None",
        "stripped_doc" : [
          "(See Notes) Toggle's the Touch Bar customization panel for the Hammerspoon application",
          ""
        ],
        "notes" : [
          " * At present this function is not useful; it is expected to be more useful when Hammerspoon specific views can provide their own touchbars.",
          "",
          " * The customization panel allows modification of the current bar visible for the macOS application triggering the request within that applications resolver chain -- as such, it can only modify touchbar's attached to the Hammerspoon console or webview objects.",
          " * The customization panel cannot modify modally displayed bar objects."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar.toggleCustomization() -> None",
        "type" : "Function",
        "returns" : [
          " * None",
          ""
        ],
        "name" : "toggleCustomization",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Creates a new bar object\n\nParameters:\n * None\n\nReturns:\n * a new bar object",
        "desc" : "Creates a new bar object",
        "def" : "hs._asm.undocumented.touchbar.bar.new() -> barObject",
        "stripped_doc" : [
          "Creates a new bar object",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.bar.new() -> barObject",
        "type" : "Constructor",
        "returns" : [
          " * a new bar object"
        ],
        "name" : "new",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set an array of strings specifying the identifiers of the touchbar items that can be added or removed from the bar object through user customization.\n\nParameters:\n * `identifiersTable` - an optional table containing strings specifying the identifiers of touchbar items that can be added or removed from the bar object through user customization.\n\nReturns:\n * If an argument is provided, returns the barObject; otherwise returns the current value.\n\nNotes:\n * the identifiers specified must belong to touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers).",
        "desc" : "Get or set an array of strings specifying the identifiers of the touchbar items that can be added or removed from the bar object through user customization.",
        "def" : "hs._asm.undocumented.touchbar.bar:customizableIdentifiers([identifiersTable]) -> barObject | table",
        "stripped_doc" : [
          "Get or set an array of strings specifying the identifiers of the touchbar items that can be added or removed from the bar object through user customization.",
          ""
        ],
        "notes" : [
          " * the identifiers specified must belong to touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers)."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:customizableIdentifiers([identifiersTable]) -> barObject | table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, returns the barObject; otherwise returns the current value.",
          ""
        ],
        "name" : "customizableIdentifiers",
        "parameters" : [
          " * `identifiersTable` - an optional table containing strings specifying the identifiers of touchbar items that can be added or removed from the bar object through user customization.",
          ""
        ]
      },
      {
        "doc" : "Get or set the customization label for saving and restoring user customizations for the bar.\n\nParameters:\n * `label` - an optional string, or explicit nil to disable, specifying the customization label for saving and restoring user customizations for the bar; defaults to nil.\n\nReturns:\n * If an argument is provided, returns the barObject; otherwise returns the current value.",
        "desc" : "Get or set the customization label for saving and restoring user customizations for the bar.",
        "def" : "hs._asm.undocumented.touchbar.bar:customizationLabel([label]) -> barObject | string",
        "stripped_doc" : [
          "Get or set the customization label for saving and restoring user customizations for the bar.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:customizationLabel([label]) -> barObject | string",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, returns the barObject; otherwise returns the current value."
        ],
        "name" : "customizationLabel",
        "parameters" : [
          " * `label` - an optional string, or explicit nil to disable, specifying the customization label for saving and restoring user customizations for the bar; defaults to nil.",
          ""
        ]
      },
      {
        "doc" : "Get or set an array of strings specifying the identifiers of the touchbar items added to the bar object by default, before any user customization.\n\nParameters:\n * `identifiersTable` - an optional table containing strings specifying the identifiers of touchbar items added to the bar object by default, before any user customization.\n\nReturns:\n * If an argument is provided, returns the barObject; otherwise returns the current value.\n\nNotes:\n * the identifiers specified must belong to touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers).",
        "desc" : "Get or set an array of strings specifying the identifiers of the touchbar items added to the bar object by default, before any user customization.",
        "def" : "hs._asm.undocumented.touchbar.bar:defaultIdentifiers([identifiersTable]) -> barObject | table",
        "stripped_doc" : [
          "Get or set an array of strings specifying the identifiers of the touchbar items added to the bar object by default, before any user customization.",
          ""
        ],
        "notes" : [
          " * the identifiers specified must belong to touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers)."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:defaultIdentifiers([identifiersTable]) -> barObject | table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, returns the barObject; otherwise returns the current value.",
          ""
        ],
        "name" : "defaultIdentifiers",
        "parameters" : [
          " * `identifiersTable` - an optional table containing strings specifying the identifiers of touchbar items added to the bar object by default, before any user customization.",
          ""
        ]
      },
      {
        "doc" : "Dismiss the bar from the touch bar display by removing it if it is currently being displayed modally.\n\nParameters:\n * None\n\nReturns:\n * the barObject\n\nNotes:\n * If an `itemObject` was specified with [hs._asm.undocumented.touchbar.bar:presentModalBar](#presentModalBar) or if the bar was displayed with `hs._asm.undocumented.touchbar.item:presentModalBar`, this method will ***not*** restore the item to the system tray.\n\n * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6.",
        "desc" : "Dismiss the bar from the touch bar display by removing it if it is currently being displayed modally.",
        "def" : "hs._asm.undocumented.touchbar.bar:dismissModalBar() -> barObject",
        "stripped_doc" : [
          "Dismiss the bar from the touch bar display by removing it if it is currently being displayed modally.",
          ""
        ],
        "notes" : [
          " * If an `itemObject` was specified with [hs._asm.undocumented.touchbar.bar:presentModalBar](#presentModalBar) or if the bar was displayed with `hs._asm.undocumented.touchbar.item:presentModalBar`, this method will ***not*** restore the item to the system tray.",
          "",
          " * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:dismissModalBar() -> barObject",
        "type" : "Method",
        "returns" : [
          " * the barObject",
          ""
        ],
        "name" : "dismissModalBar",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the item which replaces the system escape key for the bar.\n\nParameters:\n * `identifer` - an optional string, or explicit nil to disable, specifying the item which replaces the system escape key for the bar; defaults to nil.\n\nReturns:\n * If an argument is provided, returns the barObject; otherwise returns the current value.\n\nNotes:\n * This method has no effect on modally displayed bars.\n\n * the identifier specified must belong to a touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems).",
        "desc" : "Get or set the item which replaces the system escape key for the bar.",
        "def" : "hs._asm.undocumented.touchbar.bar:escapeKeyReplacement([identifier]) -> barObject | string",
        "stripped_doc" : [
          "Get or set the item which replaces the system escape key for the bar.",
          ""
        ],
        "notes" : [
          " * This method has no effect on modally displayed bars.",
          "",
          " * the identifier specified must belong to a touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems)."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:escapeKeyReplacement([identifier]) -> barObject | string",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, returns the barObject; otherwise returns the current value.",
          ""
        ],
        "name" : "escapeKeyReplacement",
        "parameters" : [
          " * `identifer` - an optional string, or explicit nil to disable, specifying the item which replaces the system escape key for the bar; defaults to nil.",
          ""
        ]
      },
      {
        "doc" : "Returns a boolean indicating whether the bar object is currently visible in the laptop or virtual Touch Bar.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the touchbar represented by the object is currently being displayed in the laptop or virtual Touch Bar.",
        "desc" : "Returns a boolean indicating whether the bar object is currently visible in the laptop or virtual Touch Bar.",
        "def" : "hs._asm.undocumented.touchbar.bar:isVisible() -> boolean",
        "stripped_doc" : [
          "Returns a boolean indicating whether the bar object is currently visible in the laptop or virtual Touch Bar.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:isVisible() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the touchbar represented by the object is currently being displayed in the laptop or virtual Touch Bar."
        ],
        "name" : "isVisible",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns the touchbarItemObject for the identifier specified.\n\nParameters:\n * `identifier` - a string specifying the touchbarItem object to get from the items assigned to the bar with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems).\n\nReturns:\n * the touchbarItem object for the item specified or nil if no such item has been assigned to the bar.",
        "desc" : "Returns the touchbarItemObject for the identifier specified.",
        "def" : "hs._asm.undocumented.touchbar.bar:itemForIdentifier([identifier]) -> touchbarItemObject | nil",
        "stripped_doc" : [
          "Returns the touchbarItemObject for the identifier specified.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:itemForIdentifier([identifier]) -> touchbarItemObject | nil",
        "type" : "Method",
        "returns" : [
          " * the touchbarItem object for the item specified or nil if no such item has been assigned to the bar."
        ],
        "name" : "itemForIdentifier",
        "parameters" : [
          " * `identifier` - a string specifying the touchbarItem object to get from the items assigned to the bar with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems).",
          ""
        ]
      },
      {
        "doc" : "Returns an array of strings specifying the identifiers of the touchbar items currently presented by the bar object.\n\nParameters:\n * None\n\nReturns:\n * an array of strings specifying the identifiers of the touchbar items currently presented by the bar object.\n\nNotes:\n * If the user has not customized the bar, the list of identifiers will match the list provided by [hs._asm.undocumented.touchbar.bar:defaultIdentifiers()](#defaultIdentifiers).",
        "desc" : "Returns an array of strings specifying the identifiers of the touchbar items currently presented by the bar object.",
        "def" : "hs._asm.undocumented.touchbar.bar:itemIdentifiers() -> table",
        "stripped_doc" : [
          "Returns an array of strings specifying the identifiers of the touchbar items currently presented by the bar object.",
          ""
        ],
        "notes" : [
          " * If the user has not customized the bar, the list of identifiers will match the list provided by [hs._asm.undocumented.touchbar.bar:defaultIdentifiers()](#defaultIdentifiers)."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:itemIdentifiers() -> table",
        "type" : "Method",
        "returns" : [
          " * an array of strings specifying the identifiers of the touchbar items currently presented by the bar object.",
          ""
        ],
        "name" : "itemIdentifiers",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Dismiss the bar from the touch bar display by minimizing it if it is currently being displayed modally.\n\nParameters:\n * None\n\nReturns:\n * the barObject\n\nNotes:\n * If an `itemObject` was specified with [hs._asm.undocumented.touchbar.bar:presentModalBar](#presentModalBar) or if the bar was displayed with `hs._asm.undocumented.touchbar.item:presentModalBar`, this method ***will*** restore the item to the system tray.\n\n * This method is the same as pressing the `dismissButton` if it was not set to false when [hs._asm.undocumented.touchbar.bar:presentModalBar](#presentModalBar) or `hs._asm.undocumented.touchbar.item:presentModalBar` was invoked.\n\n * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6.",
        "desc" : "Dismiss the bar from the touch bar display by minimizing it if it is currently being displayed modally.",
        "def" : "hs._asm.undocumented.touchbar.bar:minimizeModalBar() -> barObject",
        "stripped_doc" : [
          "Dismiss the bar from the touch bar display by minimizing it if it is currently being displayed modally.",
          ""
        ],
        "notes" : [
          " * If an `itemObject` was specified with [hs._asm.undocumented.touchbar.bar:presentModalBar](#presentModalBar) or if the bar was displayed with `hs._asm.undocumented.touchbar.item:presentModalBar`, this method ***will*** restore the item to the system tray.",
          "",
          " * This method is the same as pressing the `dismissButton` if it was not set to false when [hs._asm.undocumented.touchbar.bar:presentModalBar](#presentModalBar) or `hs._asm.undocumented.touchbar.item:presentModalBar` was invoked.",
          "",
          " * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:minimizeModalBar() -> barObject",
        "type" : "Method",
        "returns" : [
          " * the barObject",
          ""
        ],
        "name" : "minimizeModalBar",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Presents the bar in the touch bar display modally.\n\nParameters:\n * `itemObject`    - an optional `hs._asm.undocumented.touchbar.item` object which, if currently attached to the system tray, will be hidden while the bar is visible modally.\n * `dismissButton` - an optional boolean, default true, specifying whether or not the system escape (or its current replacement) button should be replaced by a button to remove the modal bar from the touch bar display when pressed.\n\nReturns:\n * the barObject\n\nNotes:\n * If you specify `dismissButton` as false, then you must use [hs._asm.undocumented.touchbar.bar:minimizeModalBar](#minimizeModalBar) or [hs._asm.undocumented.touchbar.bar:dismissModalBar](#dismissModalBar) to remove the modal bar from the touch bar display.\n\n * If you do not have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences, the modal bar will only be displayed when the Hammerspoon application is the frontmost application.\n\n * If you specify `itemObject` and the object is not currently attached to the system tray (see `hs._asm.undocumented.touchbar.item:addToSystemTray)`, or if you do not have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences, providing this argument has no effect.\n\n * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6.",
        "desc" : "Presents the bar in the touch bar display modally.",
        "def" : "hs._asm.undocumented.touchbar.bar:presentModalBar([itemObject], [dismissButton]) -> barObject",
        "stripped_doc" : [
          "Presents the bar in the touch bar display modally.",
          ""
        ],
        "notes" : [
          " * If you specify `dismissButton` as false, then you must use [hs._asm.undocumented.touchbar.bar:minimizeModalBar](#minimizeModalBar) or [hs._asm.undocumented.touchbar.bar:dismissModalBar](#dismissModalBar) to remove the modal bar from the touch bar display.",
          "",
          " * If you do not have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences, the modal bar will only be displayed when the Hammerspoon application is the frontmost application.",
          "",
          " * If you specify `itemObject` and the object is not currently attached to the system tray (see `hs._asm.undocumented.touchbar.item:addToSystemTray)`, or if you do not have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences, providing this argument has no effect.",
          "",
          " * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:presentModalBar([itemObject], [dismissButton]) -> barObject",
        "type" : "Method",
        "returns" : [
          " * the barObject",
          ""
        ],
        "name" : "presentModalBar",
        "parameters" : [
          " * `itemObject`    - an optional `hs._asm.undocumented.touchbar.item` object which, if currently attached to the system tray, will be hidden while the bar is visible modally.",
          " * `dismissButton` - an optional boolean, default true, specifying whether or not the system escape (or its current replacement) button should be replaced by a button to remove the modal bar from the touch bar display when pressed.",
          ""
        ]
      },
      {
        "doc" : "Get or set the principle item for the bar.\n\nParameters:\n * `identifer` - an optional string, or explicit nil to disable, specifying the principle item for the bar; defaults to nil.\n\nReturns:\n * If an argument is provided, returns the barObject; otherwise returns the current value.\n\nNotes:\n * the principle item will be centered in the displayed portion of the bar.\n\n * the identifier specified must belong to a touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers).",
        "desc" : "Get or set the principle item for the bar.",
        "def" : "hs._asm.undocumented.touchbar.bar:principleItem([identifier]) -> barObject | string",
        "stripped_doc" : [
          "Get or set the principle item for the bar.",
          ""
        ],
        "notes" : [
          " * the principle item will be centered in the displayed portion of the bar.",
          "",
          " * the identifier specified must belong to a touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers)."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:principleItem([identifier]) -> barObject | string",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, returns the barObject; otherwise returns the current value.",
          ""
        ],
        "name" : "principleItem",
        "parameters" : [
          " * `identifer` - an optional string, or explicit nil to disable, specifying the principle item for the bar; defaults to nil.",
          ""
        ]
      },
      {
        "doc" : "Get or set an array of strings specifying the identifiers of the touchbar items that cannot be removed from the bar object through user customization.\n\nParameters:\n * `identifiersTable` - an optional table containing strings specifying the identifiers of touchbar items that cannot be removed from the bar object through user customization.\n\nReturns:\n * If an argument is provided, returns the barObject; otherwise returns the current value.\n\nNotes:\n * the identifiers specified must belong to touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers).",
        "desc" : "Get or set an array of strings specifying the identifiers of the touchbar items that cannot be removed from the bar object through user customization.",
        "def" : "hs._asm.undocumented.touchbar.bar:requiredIdentifiers([identifiersTable]) -> barObject | table",
        "stripped_doc" : [
          "Get or set an array of strings specifying the identifiers of the touchbar items that cannot be removed from the bar object through user customization.",
          ""
        ],
        "notes" : [
          " * the identifiers specified must belong to touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers)."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:requiredIdentifiers([identifiersTable]) -> barObject | table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, returns the barObject; otherwise returns the current value.",
          ""
        ],
        "name" : "requiredIdentifiers",
        "parameters" : [
          " * `identifiersTable` - an optional table containing strings specifying the identifiers of touchbar items that cannot be removed from the bar object through user customization.",
          ""
        ]
      },
      {
        "doc" : "Get or set an array of `hs._asm.undocumented.touchbar.item` objects that can be presented by the bar object.\n\nParameters:\n * `itemsTable` - an optional table containing `hs._asm.undocumented.touchbar.item` objects that can be presented by the bar object.\n\nReturns:\n * If an argument is provided, returns the barObject; otherwise returns the current value.\n\nNotes:\n * only the identifiers of items assigned by this method can be used by the other methods in this module that use string identifiers in their arguments.",
        "desc" : "Get or set an array of `hs._asm.undocumented.touchbar.item` objects that can be presented by the bar object.",
        "def" : "hs._asm.undocumented.touchbar.bar:templateItems([itemsTable]) -> barObject | table",
        "stripped_doc" : [
          "Get or set an array of `hs._asm.undocumented.touchbar.item` objects that can be presented by the bar object.",
          ""
        ],
        "notes" : [
          " * only the identifiers of items assigned by this method can be used by the other methods in this module that use string identifiers in their arguments."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:templateItems([itemsTable]) -> barObject | table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, returns the barObject; otherwise returns the current value.",
          ""
        ],
        "name" : "templateItems",
        "parameters" : [
          " * `itemsTable` - an optional table containing `hs._asm.undocumented.touchbar.item` objects that can be presented by the bar object.",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "doc" : "Returns a boolean indicating whether the bar object is currently visible in the laptop or virtual Touch Bar.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the touchbar represented by the object is currently being displayed in the laptop or virtual Touch Bar.",
        "desc" : "Returns a boolean indicating whether the bar object is currently visible in the laptop or virtual Touch Bar.",
        "def" : "hs._asm.undocumented.touchbar.bar:isVisible() -> boolean",
        "stripped_doc" : [
          "Returns a boolean indicating whether the bar object is currently visible in the laptop or virtual Touch Bar.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:isVisible() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the touchbar represented by the object is currently being displayed in the laptop or virtual Touch Bar."
        ],
        "name" : "isVisible",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns an array of strings specifying the identifiers of the touchbar items currently presented by the bar object.\n\nParameters:\n * None\n\nReturns:\n * an array of strings specifying the identifiers of the touchbar items currently presented by the bar object.\n\nNotes:\n * If the user has not customized the bar, the list of identifiers will match the list provided by [hs._asm.undocumented.touchbar.bar:defaultIdentifiers()](#defaultIdentifiers).",
        "desc" : "Returns an array of strings specifying the identifiers of the touchbar items currently presented by the bar object.",
        "def" : "hs._asm.undocumented.touchbar.bar:itemIdentifiers() -> table",
        "stripped_doc" : [
          "Returns an array of strings specifying the identifiers of the touchbar items currently presented by the bar object.",
          ""
        ],
        "notes" : [
          " * If the user has not customized the bar, the list of identifiers will match the list provided by [hs._asm.undocumented.touchbar.bar:defaultIdentifiers()](#defaultIdentifiers)."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:itemIdentifiers() -> table",
        "type" : "Method",
        "returns" : [
          " * an array of strings specifying the identifiers of the touchbar items currently presented by the bar object.",
          ""
        ],
        "name" : "itemIdentifiers",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the customization label for saving and restoring user customizations for the bar.\n\nParameters:\n * `label` - an optional string, or explicit nil to disable, specifying the customization label for saving and restoring user customizations for the bar; defaults to nil.\n\nReturns:\n * If an argument is provided, returns the barObject; otherwise returns the current value.",
        "desc" : "Get or set the customization label for saving and restoring user customizations for the bar.",
        "def" : "hs._asm.undocumented.touchbar.bar:customizationLabel([label]) -> barObject | string",
        "stripped_doc" : [
          "Get or set the customization label for saving and restoring user customizations for the bar.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:customizationLabel([label]) -> barObject | string",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, returns the barObject; otherwise returns the current value."
        ],
        "name" : "customizationLabel",
        "parameters" : [
          " * `label` - an optional string, or explicit nil to disable, specifying the customization label for saving and restoring user customizations for the bar; defaults to nil.",
          ""
        ]
      },
      {
        "doc" : "Get or set the principle item for the bar.\n\nParameters:\n * `identifer` - an optional string, or explicit nil to disable, specifying the principle item for the bar; defaults to nil.\n\nReturns:\n * If an argument is provided, returns the barObject; otherwise returns the current value.\n\nNotes:\n * the principle item will be centered in the displayed portion of the bar.\n\n * the identifier specified must belong to a touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers).",
        "desc" : "Get or set the principle item for the bar.",
        "def" : "hs._asm.undocumented.touchbar.bar:principleItem([identifier]) -> barObject | string",
        "stripped_doc" : [
          "Get or set the principle item for the bar.",
          ""
        ],
        "notes" : [
          " * the principle item will be centered in the displayed portion of the bar.",
          "",
          " * the identifier specified must belong to a touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers)."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:principleItem([identifier]) -> barObject | string",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, returns the barObject; otherwise returns the current value.",
          ""
        ],
        "name" : "principleItem",
        "parameters" : [
          " * `identifer` - an optional string, or explicit nil to disable, specifying the principle item for the bar; defaults to nil.",
          ""
        ]
      },
      {
        "doc" : "Get or set the item which replaces the system escape key for the bar.\n\nParameters:\n * `identifer` - an optional string, or explicit nil to disable, specifying the item which replaces the system escape key for the bar; defaults to nil.\n\nReturns:\n * If an argument is provided, returns the barObject; otherwise returns the current value.\n\nNotes:\n * This method has no effect on modally displayed bars.\n\n * the identifier specified must belong to a touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems).",
        "desc" : "Get or set the item which replaces the system escape key for the bar.",
        "def" : "hs._asm.undocumented.touchbar.bar:escapeKeyReplacement([identifier]) -> barObject | string",
        "stripped_doc" : [
          "Get or set the item which replaces the system escape key for the bar.",
          ""
        ],
        "notes" : [
          " * This method has no effect on modally displayed bars.",
          "",
          " * the identifier specified must belong to a touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems)."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:escapeKeyReplacement([identifier]) -> barObject | string",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, returns the barObject; otherwise returns the current value.",
          ""
        ],
        "name" : "escapeKeyReplacement",
        "parameters" : [
          " * `identifer` - an optional string, or explicit nil to disable, specifying the item which replaces the system escape key for the bar; defaults to nil.",
          ""
        ]
      },
      {
        "doc" : "Get or set an array of strings specifying the identifiers of the touchbar items that can be added or removed from the bar object through user customization.\n\nParameters:\n * `identifiersTable` - an optional table containing strings specifying the identifiers of touchbar items that can be added or removed from the bar object through user customization.\n\nReturns:\n * If an argument is provided, returns the barObject; otherwise returns the current value.\n\nNotes:\n * the identifiers specified must belong to touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers).",
        "desc" : "Get or set an array of strings specifying the identifiers of the touchbar items that can be added or removed from the bar object through user customization.",
        "def" : "hs._asm.undocumented.touchbar.bar:customizableIdentifiers([identifiersTable]) -> barObject | table",
        "stripped_doc" : [
          "Get or set an array of strings specifying the identifiers of the touchbar items that can be added or removed from the bar object through user customization.",
          ""
        ],
        "notes" : [
          " * the identifiers specified must belong to touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers)."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:customizableIdentifiers([identifiersTable]) -> barObject | table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, returns the barObject; otherwise returns the current value.",
          ""
        ],
        "name" : "customizableIdentifiers",
        "parameters" : [
          " * `identifiersTable` - an optional table containing strings specifying the identifiers of touchbar items that can be added or removed from the bar object through user customization.",
          ""
        ]
      },
      {
        "doc" : "Get or set an array of strings specifying the identifiers of the touchbar items that cannot be removed from the bar object through user customization.\n\nParameters:\n * `identifiersTable` - an optional table containing strings specifying the identifiers of touchbar items that cannot be removed from the bar object through user customization.\n\nReturns:\n * If an argument is provided, returns the barObject; otherwise returns the current value.\n\nNotes:\n * the identifiers specified must belong to touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers).",
        "desc" : "Get or set an array of strings specifying the identifiers of the touchbar items that cannot be removed from the bar object through user customization.",
        "def" : "hs._asm.undocumented.touchbar.bar:requiredIdentifiers([identifiersTable]) -> barObject | table",
        "stripped_doc" : [
          "Get or set an array of strings specifying the identifiers of the touchbar items that cannot be removed from the bar object through user customization.",
          ""
        ],
        "notes" : [
          " * the identifiers specified must belong to touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers)."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:requiredIdentifiers([identifiersTable]) -> barObject | table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, returns the barObject; otherwise returns the current value.",
          ""
        ],
        "name" : "requiredIdentifiers",
        "parameters" : [
          " * `identifiersTable` - an optional table containing strings specifying the identifiers of touchbar items that cannot be removed from the bar object through user customization.",
          ""
        ]
      },
      {
        "doc" : "Get or set an array of strings specifying the identifiers of the touchbar items added to the bar object by default, before any user customization.\n\nParameters:\n * `identifiersTable` - an optional table containing strings specifying the identifiers of touchbar items added to the bar object by default, before any user customization.\n\nReturns:\n * If an argument is provided, returns the barObject; otherwise returns the current value.\n\nNotes:\n * the identifiers specified must belong to touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers).",
        "desc" : "Get or set an array of strings specifying the identifiers of the touchbar items added to the bar object by default, before any user customization.",
        "def" : "hs._asm.undocumented.touchbar.bar:defaultIdentifiers([identifiersTable]) -> barObject | table",
        "stripped_doc" : [
          "Get or set an array of strings specifying the identifiers of the touchbar items added to the bar object by default, before any user customization.",
          ""
        ],
        "notes" : [
          " * the identifiers specified must belong to touchbar items already assigned to the bar object with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems) or one of the built in identifier values defined in [hs._asm.undocumented.touchbar.bar.builtInIdentifiers](#builtInIdentifiers)."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:defaultIdentifiers([identifiersTable]) -> barObject | table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, returns the barObject; otherwise returns the current value.",
          ""
        ],
        "name" : "defaultIdentifiers",
        "parameters" : [
          " * `identifiersTable` - an optional table containing strings specifying the identifiers of touchbar items added to the bar object by default, before any user customization.",
          ""
        ]
      },
      {
        "doc" : "Get or set an array of `hs._asm.undocumented.touchbar.item` objects that can be presented by the bar object.\n\nParameters:\n * `itemsTable` - an optional table containing `hs._asm.undocumented.touchbar.item` objects that can be presented by the bar object.\n\nReturns:\n * If an argument is provided, returns the barObject; otherwise returns the current value.\n\nNotes:\n * only the identifiers of items assigned by this method can be used by the other methods in this module that use string identifiers in their arguments.",
        "desc" : "Get or set an array of `hs._asm.undocumented.touchbar.item` objects that can be presented by the bar object.",
        "def" : "hs._asm.undocumented.touchbar.bar:templateItems([itemsTable]) -> barObject | table",
        "stripped_doc" : [
          "Get or set an array of `hs._asm.undocumented.touchbar.item` objects that can be presented by the bar object.",
          ""
        ],
        "notes" : [
          " * only the identifiers of items assigned by this method can be used by the other methods in this module that use string identifiers in their arguments."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:templateItems([itemsTable]) -> barObject | table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, returns the barObject; otherwise returns the current value.",
          ""
        ],
        "name" : "templateItems",
        "parameters" : [
          " * `itemsTable` - an optional table containing `hs._asm.undocumented.touchbar.item` objects that can be presented by the bar object.",
          ""
        ]
      },
      {
        "doc" : "Returns the touchbarItemObject for the identifier specified.\n\nParameters:\n * `identifier` - a string specifying the touchbarItem object to get from the items assigned to the bar with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems).\n\nReturns:\n * the touchbarItem object for the item specified or nil if no such item has been assigned to the bar.",
        "desc" : "Returns the touchbarItemObject for the identifier specified.",
        "def" : "hs._asm.undocumented.touchbar.bar:itemForIdentifier([identifier]) -> touchbarItemObject | nil",
        "stripped_doc" : [
          "Returns the touchbarItemObject for the identifier specified.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:itemForIdentifier([identifier]) -> touchbarItemObject | nil",
        "type" : "Method",
        "returns" : [
          " * the touchbarItem object for the item specified or nil if no such item has been assigned to the bar."
        ],
        "name" : "itemForIdentifier",
        "parameters" : [
          " * `identifier` - a string specifying the touchbarItem object to get from the items assigned to the bar with [hs._asm.undocumented.touchbar.bar:templateItems](#templateItems).",
          ""
        ]
      },
      {
        "doc" : "Presents the bar in the touch bar display modally.\n\nParameters:\n * `itemObject`    - an optional `hs._asm.undocumented.touchbar.item` object which, if currently attached to the system tray, will be hidden while the bar is visible modally.\n * `dismissButton` - an optional boolean, default true, specifying whether or not the system escape (or its current replacement) button should be replaced by a button to remove the modal bar from the touch bar display when pressed.\n\nReturns:\n * the barObject\n\nNotes:\n * If you specify `dismissButton` as false, then you must use [hs._asm.undocumented.touchbar.bar:minimizeModalBar](#minimizeModalBar) or [hs._asm.undocumented.touchbar.bar:dismissModalBar](#dismissModalBar) to remove the modal bar from the touch bar display.\n\n * If you do not have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences, the modal bar will only be displayed when the Hammerspoon application is the frontmost application.\n\n * If you specify `itemObject` and the object is not currently attached to the system tray (see `hs._asm.undocumented.touchbar.item:addToSystemTray)`, or if you do not have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences, providing this argument has no effect.\n\n * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6.",
        "desc" : "Presents the bar in the touch bar display modally.",
        "def" : "hs._asm.undocumented.touchbar.bar:presentModalBar([itemObject], [dismissButton]) -> barObject",
        "stripped_doc" : [
          "Presents the bar in the touch bar display modally.",
          ""
        ],
        "notes" : [
          " * If you specify `dismissButton` as false, then you must use [hs._asm.undocumented.touchbar.bar:minimizeModalBar](#minimizeModalBar) or [hs._asm.undocumented.touchbar.bar:dismissModalBar](#dismissModalBar) to remove the modal bar from the touch bar display.",
          "",
          " * If you do not have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences, the modal bar will only be displayed when the Hammerspoon application is the frontmost application.",
          "",
          " * If you specify `itemObject` and the object is not currently attached to the system tray (see `hs._asm.undocumented.touchbar.item:addToSystemTray)`, or if you do not have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences, providing this argument has no effect.",
          "",
          " * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:presentModalBar([itemObject], [dismissButton]) -> barObject",
        "type" : "Method",
        "returns" : [
          " * the barObject",
          ""
        ],
        "name" : "presentModalBar",
        "parameters" : [
          " * `itemObject`    - an optional `hs._asm.undocumented.touchbar.item` object which, if currently attached to the system tray, will be hidden while the bar is visible modally.",
          " * `dismissButton` - an optional boolean, default true, specifying whether or not the system escape (or its current replacement) button should be replaced by a button to remove the modal bar from the touch bar display when pressed.",
          ""
        ]
      },
      {
        "doc" : "Dismiss the bar from the touch bar display by removing it if it is currently being displayed modally.\n\nParameters:\n * None\n\nReturns:\n * the barObject\n\nNotes:\n * If an `itemObject` was specified with [hs._asm.undocumented.touchbar.bar:presentModalBar](#presentModalBar) or if the bar was displayed with `hs._asm.undocumented.touchbar.item:presentModalBar`, this method will ***not*** restore the item to the system tray.\n\n * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6.",
        "desc" : "Dismiss the bar from the touch bar display by removing it if it is currently being displayed modally.",
        "def" : "hs._asm.undocumented.touchbar.bar:dismissModalBar() -> barObject",
        "stripped_doc" : [
          "Dismiss the bar from the touch bar display by removing it if it is currently being displayed modally.",
          ""
        ],
        "notes" : [
          " * If an `itemObject` was specified with [hs._asm.undocumented.touchbar.bar:presentModalBar](#presentModalBar) or if the bar was displayed with `hs._asm.undocumented.touchbar.item:presentModalBar`, this method will ***not*** restore the item to the system tray.",
          "",
          " * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:dismissModalBar() -> barObject",
        "type" : "Method",
        "returns" : [
          " * the barObject",
          ""
        ],
        "name" : "dismissModalBar",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Dismiss the bar from the touch bar display by minimizing it if it is currently being displayed modally.\n\nParameters:\n * None\n\nReturns:\n * the barObject\n\nNotes:\n * If an `itemObject` was specified with [hs._asm.undocumented.touchbar.bar:presentModalBar](#presentModalBar) or if the bar was displayed with `hs._asm.undocumented.touchbar.item:presentModalBar`, this method ***will*** restore the item to the system tray.\n\n * This method is the same as pressing the `dismissButton` if it was not set to false when [hs._asm.undocumented.touchbar.bar:presentModalBar](#presentModalBar) or `hs._asm.undocumented.touchbar.item:presentModalBar` was invoked.\n\n * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6.",
        "desc" : "Dismiss the bar from the touch bar display by minimizing it if it is currently being displayed modally.",
        "def" : "hs._asm.undocumented.touchbar.bar:minimizeModalBar() -> barObject",
        "stripped_doc" : [
          "Dismiss the bar from the touch bar display by minimizing it if it is currently being displayed modally.",
          ""
        ],
        "notes" : [
          " * If an `itemObject` was specified with [hs._asm.undocumented.touchbar.bar:presentModalBar](#presentModalBar) or if the bar was displayed with `hs._asm.undocumented.touchbar.item:presentModalBar`, this method ***will*** restore the item to the system tray.",
          "",
          " * This method is the same as pressing the `dismissButton` if it was not set to false when [hs._asm.undocumented.touchbar.bar:presentModalBar](#presentModalBar) or `hs._asm.undocumented.touchbar.item:presentModalBar` was invoked.",
          "",
          " * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6."
        ],
        "signature" : "hs._asm.undocumented.touchbar.bar:minimizeModalBar() -> barObject",
        "type" : "Method",
        "returns" : [
          " * the barObject",
          ""
        ],
        "name" : "minimizeModalBar",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "name" : "hs._asm.undocumented.touchbar.bar"
  },
  {
    "Constant" : [
      {
        "doc" : "Predefined visibility priorities for use with [hs._asm.undocumented.touchbar.item:visibilityPriority](#visibilityPriority)\n\nA table containing key-value pairs of predefined visibility priorities used when the touch bar isn't large enough to display all of the items which are eligible for presentation. Items with lower priorities are hidden first. These numbers are only suggestions and other numbers are also valid for use with [hs._asm.undocumented.touchbar.item:visibilityPriority](#visibilityPriority).\n\nPredefined values are as follows:\n * `low`   - -1000.0\n * `normal`-     0.0 (this is the default value assigned to an item when it is first created)\n * `high`  -  1000.0",
        "desc" : "Predefined visibility priorities for use with [hs._asm.undocumented.touchbar.item:visibilityPriority](#visibilityPriority)",
        "def" : "hs._asm.undocumented.touchbar.item.visibilityPriorities[]",
        "stripped_doc" : [
          "Predefined visibility priorities for use with [hs._asm.undocumented.touchbar.item:visibilityPriority](#visibilityPriority)",
          "",
          "A table containing key-value pairs of predefined visibility priorities used when the touch bar isn't large enough to display all of the items which are eligible for presentation. Items with lower priorities are hidden first. These numbers are only suggestions and other numbers are also valid for use with [hs._asm.undocumented.touchbar.item:visibilityPriority](#visibilityPriority).",
          "",
          "Predefined values are as follows:",
          " * `low`   - -1000.0",
          " * `normal`-     0.0 (this is the default value assigned to an item when it is first created)",
          " * `high`  -  1000.0"
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.item.visibilityPriorities[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "visibilityPriorities",
        "parameters" : [

        ]
      }
    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "type" : "Module",
    "desc" : "This module is used to create and manipulate touchbar item objects which can added to `hs._asm.undocumented.touchbar.bar` objects and displayed in the Touch Bar of new Macintosh Pro laptops or with the virtual Touch Bar provided by `hs._asm.undocumented.touchbar`.",
    "Constructor" : [
      {
        "doc" : "Create a new button touchbarItem object.\n\nParameters:\n * `title`      - A string specifying the title for the button. Optional if `image` is specified.\n * `image`      - An `hs.image` object specifying the image for the button.  Optional is `title` is specified.\n * `identifier` - An optional string specifying the identifier for this touchbar item. Must be unique within the bar the item will be assigned to if specified. If not specified, a new UUID is generated for the item.\n\nReturns:\n * a touchbarItemObject or nil if an error occurs\n\nNotes:\n * You can change the button's title with [hs._asm.undocumented.touchbar.item:title](#title) only if you initially assign one with this constructor.\n * You can change the button's image with [hs._asm.undocumented.touchbar.item:image](#title) only if you initially assign one with this constructor.\n * If you intend to allow customization of the touch bar, it is highly recommended that you specify an identifier, since the UUID will change each time the item is regenerated (when Hammerspoon reloads or restarts).",
        "desc" : "Create a new button touchbarItem object.",
        "def" : "hs._asm.undocumented.touchbar.item.newButton([title], [image], [identifier]) -> touchbarItemObject",
        "stripped_doc" : [
          "Create a new button touchbarItem object.",
          ""
        ],
        "notes" : [
          " * You can change the button's title with [hs._asm.undocumented.touchbar.item:title](#title) only if you initially assign one with this constructor.",
          " * You can change the button's image with [hs._asm.undocumented.touchbar.item:image](#title) only if you initially assign one with this constructor.",
          " * If you intend to allow customization of the touch bar, it is highly recommended that you specify an identifier, since the UUID will change each time the item is regenerated (when Hammerspoon reloads or restarts)."
        ],
        "signature" : "hs._asm.undocumented.touchbar.item.newButton([title], [image], [identifier]) -> touchbarItemObject",
        "type" : "Constructor",
        "returns" : [
          " * a touchbarItemObject or nil if an error occurs",
          ""
        ],
        "name" : "newButton",
        "parameters" : [
          " * `title`      - A string specifying the title for the button. Optional if `image` is specified.",
          " * `image`      - An `hs.image` object specifying the image for the button.  Optional is `title` is specified.",
          " * `identifier` - An optional string specifying the identifier for this touchbar item. Must be unique within the bar the item will be assigned to if specified. If not specified, a new UUID is generated for the item.",
          ""
        ]
      }
    ],
    "Field" : [

    ],
    "doc" : "This module is used to create and manipulate touchbar item objects which can added to `hs._asm.undocumented.touchbar.bar` objects and displayed in the Touch Bar of new Macintosh Pro laptops or with the virtual Touch Bar provided by `hs._asm.undocumented.touchbar`.\n\nAt present, only simple button type items are supported.\n\nThis module requires macOS 10.12.2 or later. Some of the methods (identified in their notes) in this module use undocumented functions and\/or framework methods and are not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6.\n\nThis module is very experimental and is still under development, so the exact functions and methods are subject to change without notice.\n\nTODO:\n * `isVisible` is KVO, so add a watcher\n * Why does popover fail to show expanded items?  I think fixing this will also allow colorPicker and sharingService to work",
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "Predefined visibility priorities for use with [hs._asm.undocumented.touchbar.item:visibilityPriority](#visibilityPriority)\n\nA table containing key-value pairs of predefined visibility priorities used when the touch bar isn't large enough to display all of the items which are eligible for presentation. Items with lower priorities are hidden first. These numbers are only suggestions and other numbers are also valid for use with [hs._asm.undocumented.touchbar.item:visibilityPriority](#visibilityPriority).\n\nPredefined values are as follows:\n * `low`   - -1000.0\n * `normal`-     0.0 (this is the default value assigned to an item when it is first created)\n * `high`  -  1000.0",
        "desc" : "Predefined visibility priorities for use with [hs._asm.undocumented.touchbar.item:visibilityPriority](#visibilityPriority)",
        "def" : "hs._asm.undocumented.touchbar.item.visibilityPriorities[]",
        "stripped_doc" : [
          "Predefined visibility priorities for use with [hs._asm.undocumented.touchbar.item:visibilityPriority](#visibilityPriority)",
          "",
          "A table containing key-value pairs of predefined visibility priorities used when the touch bar isn't large enough to display all of the items which are eligible for presentation. Items with lower priorities are hidden first. These numbers are only suggestions and other numbers are also valid for use with [hs._asm.undocumented.touchbar.item:visibilityPriority](#visibilityPriority).",
          "",
          "Predefined values are as follows:",
          " * `low`   - -1000.0",
          " * `normal`-     0.0 (this is the default value assigned to an item when it is first created)",
          " * `high`  -  1000.0"
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.item.visibilityPriorities[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "visibilityPriorities",
        "parameters" : [

        ]
      },
      {
        "doc" : "Create a new button touchbarItem object.\n\nParameters:\n * `title`      - A string specifying the title for the button. Optional if `image` is specified.\n * `image`      - An `hs.image` object specifying the image for the button.  Optional is `title` is specified.\n * `identifier` - An optional string specifying the identifier for this touchbar item. Must be unique within the bar the item will be assigned to if specified. If not specified, a new UUID is generated for the item.\n\nReturns:\n * a touchbarItemObject or nil if an error occurs\n\nNotes:\n * You can change the button's title with [hs._asm.undocumented.touchbar.item:title](#title) only if you initially assign one with this constructor.\n * You can change the button's image with [hs._asm.undocumented.touchbar.item:image](#title) only if you initially assign one with this constructor.\n * If you intend to allow customization of the touch bar, it is highly recommended that you specify an identifier, since the UUID will change each time the item is regenerated (when Hammerspoon reloads or restarts).",
        "desc" : "Create a new button touchbarItem object.",
        "def" : "hs._asm.undocumented.touchbar.item.newButton([title], [image], [identifier]) -> touchbarItemObject",
        "stripped_doc" : [
          "Create a new button touchbarItem object.",
          ""
        ],
        "notes" : [
          " * You can change the button's title with [hs._asm.undocumented.touchbar.item:title](#title) only if you initially assign one with this constructor.",
          " * You can change the button's image with [hs._asm.undocumented.touchbar.item:image](#title) only if you initially assign one with this constructor.",
          " * If you intend to allow customization of the touch bar, it is highly recommended that you specify an identifier, since the UUID will change each time the item is regenerated (when Hammerspoon reloads or restarts)."
        ],
        "signature" : "hs._asm.undocumented.touchbar.item.newButton([title], [image], [identifier]) -> touchbarItemObject",
        "type" : "Constructor",
        "returns" : [
          " * a touchbarItemObject or nil if an error occurs",
          ""
        ],
        "name" : "newButton",
        "parameters" : [
          " * `title`      - A string specifying the title for the button. Optional if `image` is specified.",
          " * `image`      - An `hs.image` object specifying the image for the button.  Optional is `title` is specified.",
          " * `identifier` - An optional string specifying the identifier for this touchbar item. Must be unique within the bar the item will be assigned to if specified. If not specified, a new UUID is generated for the item.",
          ""
        ]
      },
      {
        "doc" : "Add or remove the touchbar item from the System Tray in the touch bar display.\n\nParameters:\n * `state` - a boolean specifying if the item should be displayed in the System Tray (true) or not (false).\n\nReturns:\n * the touchbarItem object\n\nNotes:\n * The item will only be visible in the System Tray if you have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences.\n\n * Initial experiments suggest that only one item *from any macOS application currently running* may be added to the System Tray at a time.\n * Adding a new item will hide any previous item assigned; however they do appear to stack, so removing an existing item with this method, or if it has bar object attached with [hs._asm.undocumented.touchbar.item:presentModalBar](#presentModalBar) and you dismiss the bar with `hs._asm.undocumented.touchbar.bar:dismissModalBar`, the previous item should become visible again.\n\n * At present, there is no known way to determine which item is currently displayed in the System Tray or detect when a specific item is replaced ([hs._asm.undocumented.touchbar.item:isVisible](#isVisible) returns false). Please submit an issue if you know of a solution.\n\n * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6.",
        "desc" : "Add or remove the touchbar item from the System Tray in the touch bar display.",
        "def" : "hs._asm.undocumented.touchbar.item:addToSystemTray(state) -> touchbarItemObject",
        "stripped_doc" : [
          "Add or remove the touchbar item from the System Tray in the touch bar display.",
          ""
        ],
        "notes" : [
          " * The item will only be visible in the System Tray if you have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences.",
          "",
          " * Initial experiments suggest that only one item *from any macOS application currently running* may be added to the System Tray at a time.",
          " * Adding a new item will hide any previous item assigned; however they do appear to stack, so removing an existing item with this method, or if it has bar object attached with [hs._asm.undocumented.touchbar.item:presentModalBar](#presentModalBar) and you dismiss the bar with `hs._asm.undocumented.touchbar.bar:dismissModalBar`, the previous item should become visible again.",
          "",
          " * At present, there is no known way to determine which item is currently displayed in the System Tray or detect when a specific item is replaced ([hs._asm.undocumented.touchbar.item:isVisible](#isVisible) returns false). Please submit an issue if you know of a solution.",
          "",
          " * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6."
        ],
        "signature" : "hs._asm.undocumented.touchbar.item:addToSystemTray(state) -> touchbarItemObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarItem object",
          ""
        ],
        "name" : "addToSystemTray",
        "parameters" : [
          " * `state` - a boolean specifying if the item should be displayed in the System Tray (true) or not (false).",
          ""
        ]
      },
      {
        "doc" : "Get or set the callback function for the touchbar item.\n\nParameters:\n * `fn` - an optional function, or explicit nil to remove, specifying the callback to be invoked when the item is pressed.\n\nReturns:\n * if an argument is provided, returns the touchbarItem object; otherwise returns the current value\n\nNotes:\n * The callback function should expect one argument, the touchbarItemObject, and return none.",
        "desc" : "Get or set the callback function for the touchbar item.",
        "def" : "hs._asm.undocumented.touchbar.item:callback([fn | nil]) -> touchbarItemObject | fn",
        "stripped_doc" : [
          "Get or set the callback function for the touchbar item.",
          ""
        ],
        "notes" : [
          " * The callback function should expect one argument, the touchbarItemObject, and return none."
        ],
        "signature" : "hs._asm.undocumented.touchbar.item:callback([fn | nil]) -> touchbarItemObject | fn",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarItem object; otherwise returns the current value",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - an optional function, or explicit nil to remove, specifying the callback to be invoked when the item is pressed.",
          ""
        ]
      },
      {
        "doc" : "Get or set the label displayed for the item when the customization panel is being displayed for the touch bar.\n\nParameters:\n * `label` - an optional string, or explicit nil to reset to an empty string, specifying the label to be displayed with the item when the customization panel is being displayed for the touch bar.  Defaults to an empty string.\n\nReturns:\n * if an argument is provided, returns the touchbarItem object; otherwise returns the current value",
        "desc" : "Get or set the label displayed for the item when the customization panel is being displayed for the touch bar.",
        "def" : "hs._asm.undocumented.touchbar.item:customizationLabel([label]) -> touchbarItemObject | string",
        "stripped_doc" : [
          "Get or set the label displayed for the item when the customization panel is being displayed for the touch bar.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.item:customizationLabel([label]) -> touchbarItemObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarItem object; otherwise returns the current value"
        ],
        "name" : "customizationLabel",
        "parameters" : [
          " * `label` - an optional string, or explicit nil to reset to an empty string, specifying the label to be displayed with the item when the customization panel is being displayed for the touch bar.  Defaults to an empty string.",
          ""
        ]
      },
      {
        "doc" : "Returns the identifier for the touchbarItem object\n\nParameters:\n * None\n\nReturns:\n * the identifier for the item as a string",
        "desc" : "Returns the identifier for the touchbarItem object",
        "def" : "hs._asm.undocumented.touchbar.item:identifier() -> string",
        "stripped_doc" : [
          "Returns the identifier for the touchbarItem object",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.item:identifier() -> string",
        "type" : "Method",
        "returns" : [
          " * the identifier for the item as a string"
        ],
        "name" : "identifier",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the image for a button item which was initially given an image when created.\n\nParameters:\n * `image` - an optional `hs.image` object, or explicit nil, specifying the image for the button item.\n\nReturns:\n * if an argument is provided, returns the touchbarItem object; otherwise returns the current value\n\nNotes:\n * This method will generate an error if an image was not provided when the object was created.\n * Setting the image to nil will remove the image and shrink the button, but not as tightly as the button would appear if it had been initially created without an image at all.",
        "desc" : "Get or set the image for a button item which was initially given an image when created.",
        "def" : "hs._asm.undocumented.touchbar.item:image([image]) -> touchbarItemObject | hs.image object",
        "stripped_doc" : [
          "Get or set the image for a button item which was initially given an image when created.",
          ""
        ],
        "notes" : [
          " * This method will generate an error if an image was not provided when the object was created.",
          " * Setting the image to nil will remove the image and shrink the button, but not as tightly as the button would appear if it had been initially created without an image at all."
        ],
        "signature" : "hs._asm.undocumented.touchbar.item:image([image]) -> touchbarItemObject | hs.image object",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarItem object; otherwise returns the current value",
          ""
        ],
        "name" : "image",
        "parameters" : [
          " * `image` - an optional `hs.image` object, or explicit nil, specifying the image for the button item.",
          ""
        ]
      },
      {
        "doc" : "Returns a boolean indicating whether or not the item is currently visible in the bar that it is assigned to.\n\nParameters:\n * None\n\nReturns:\n * a boolean specifying whether or not the item is currently visible in the bar that it is assigned to.\n\nNotes:\n * If the bar that the item is assigned to has been visible at some point in the past, and the item was visible at that time, this method will return true even if the bar is not currently visible. If you want to know if the item is visible in the touch bar display *right now*, you should use `reallyVisible = bar:isVisible() and item:isVisible()`",
        "desc" : "Returns a boolean indicating whether or not the item is currently visible in the bar that it is assigned to.",
        "def" : "hs._asm.undocumented.touchbar.item:isVisible() -> boolean",
        "stripped_doc" : [
          "Returns a boolean indicating whether or not the item is currently visible in the bar that it is assigned to.",
          ""
        ],
        "notes" : [
          " * If the bar that the item is assigned to has been visible at some point in the past, and the item was visible at that time, this method will return true even if the bar is not currently visible. If you want to know if the item is visible in the touch bar display *right now*, you should use `reallyVisible = bar:isVisible() and item:isVisible()`"
        ],
        "signature" : "hs._asm.undocumented.touchbar.item:isVisible() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean specifying whether or not the item is currently visible in the bar that it is assigned to.",
          ""
        ],
        "name" : "isVisible",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Presents a bar in the touch bar display modally and hides this item if it is present in the System Tray of the touch bar display.\n\nParameters:\n * `touchbar` - An `hs._asm.undocumented.touchbar.bar` object of the bar to display modally in the touch bar display.\n * `dismissButton` - an optional boolean, default true, specifying whether or not the system escape (or its current replacement) button should be replaced by a button to remove the modal bar from the touch bar display when pressed.\n\nReturns:\n * the touchbarItem object\n\nNotes:\n * If you specify `dismissButton` as false, then you must use `hs._asm.undocumented.touchbar.bar:minimizeModalBar` or `hs._asm.undocumented.touchbar.bar:dismissModalBar` to remove the modal bar from the touch bar display.\n   * Use `hs._asm.undocumented.touchbar.bar:minimizeModalBar` if you want the item to reappear in the System Tray (if it was present before displaying the bar).\n\n * If you do not have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences, the modal bar will only be displayed when the Hammerspoon application is the frontmost application.\n\n * This method is actually a wrapper to `hs._asm.undocumented.touchbar.bar:presentModalBar` provided for convenience.\n\n * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6.",
        "desc" : "Presents a bar in the touch bar display modally and hides this item if it is present in the System Tray of the touch bar display.",
        "def" : "hs._asm.undocumented.touchbar.item:presentModalBar(touchbar, [dismissButton]) -> touchbarItemObject",
        "stripped_doc" : [
          "Presents a bar in the touch bar display modally and hides this item if it is present in the System Tray of the touch bar display.",
          ""
        ],
        "notes" : [
          " * If you specify `dismissButton` as false, then you must use `hs._asm.undocumented.touchbar.bar:minimizeModalBar` or `hs._asm.undocumented.touchbar.bar:dismissModalBar` to remove the modal bar from the touch bar display.",
          "   * Use `hs._asm.undocumented.touchbar.bar:minimizeModalBar` if you want the item to reappear in the System Tray (if it was present before displaying the bar).",
          "",
          " * If you do not have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences, the modal bar will only be displayed when the Hammerspoon application is the frontmost application.",
          "",
          " * This method is actually a wrapper to `hs._asm.undocumented.touchbar.bar:presentModalBar` provided for convenience.",
          "",
          " * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6."
        ],
        "signature" : "hs._asm.undocumented.touchbar.item:presentModalBar(touchbar, [dismissButton]) -> touchbarItemObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarItem object",
          ""
        ],
        "name" : "presentModalBar",
        "parameters" : [
          " * `touchbar` - An `hs._asm.undocumented.touchbar.bar` object of the bar to display modally in the touch bar display.",
          " * `dismissButton` - an optional boolean, default true, specifying whether or not the system escape (or its current replacement) button should be replaced by a button to remove the modal bar from the touch bar display when pressed.",
          ""
        ]
      },
      {
        "doc" : "Get or set the title for a button item which was initially given a title when created.\n\nParameters:\n * `title` - an optional string, or explicit nil, specifying the title for the button item.\n\nReturns:\n * if an argument is provided, returns the touchbarItem object; otherwise returns the current value\n\nNotes:\n * This method will generate an error if a title was not provided when the object was created.\n * Setting the title to nil will remove the title and shrink the button, but not as tightly as the button would appear if it had been initially created without a title at all.",
        "desc" : "Get or set the title for a button item which was initially given a title when created.",
        "def" : "hs._asm.undocumented.touchbar.item:title([title]) -> touchbarItemObject | string",
        "stripped_doc" : [
          "Get or set the title for a button item which was initially given a title when created.",
          ""
        ],
        "notes" : [
          " * This method will generate an error if a title was not provided when the object was created.",
          " * Setting the title to nil will remove the title and shrink the button, but not as tightly as the button would appear if it had been initially created without a title at all."
        ],
        "signature" : "hs._asm.undocumented.touchbar.item:title([title]) -> touchbarItemObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarItem object; otherwise returns the current value",
          ""
        ],
        "name" : "title",
        "parameters" : [
          " * `title` - an optional string, or explicit nil, specifying the title for the button item.",
          ""
        ]
      },
      {
        "doc" : "Get or set the visibility priority for the touchbar item.\n\nParameters:\n * `priority` - an optional number specifying the visibility priority for the item.\n\nReturns:\n * if an argument is provided, returns the touchbarItem object; otherwise returns the current value\n\nNotes:\n * If their are more items to be presented in the touch bar display than space permits, items with a lower visibility priority will be hidden first.\n * Some predefined visibility values are defined in [hs._asm.undocumented.touchbar.item.visibilityPriorities](#visibilityPriorities), though others are allowed. The default priority for an item object is `hs._asm.undocumented.touchbar.item.visibilityPriorities.normal`.",
        "desc" : "Get or set the visibility priority for the touchbar item.",
        "def" : "hs._asm.undocumented.touchbar.item:visibilityPriority([priority]) -> touchbarItemObject | number",
        "stripped_doc" : [
          "Get or set the visibility priority for the touchbar item.",
          ""
        ],
        "notes" : [
          " * If their are more items to be presented in the touch bar display than space permits, items with a lower visibility priority will be hidden first.",
          " * Some predefined visibility values are defined in [hs._asm.undocumented.touchbar.item.visibilityPriorities](#visibilityPriorities), though others are allowed. The default priority for an item object is `hs._asm.undocumented.touchbar.item.visibilityPriorities.normal`."
        ],
        "signature" : "hs._asm.undocumented.touchbar.item:visibilityPriority([priority]) -> touchbarItemObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarItem object; otherwise returns the current value",
          ""
        ],
        "name" : "visibilityPriority",
        "parameters" : [
          " * `priority` - an optional number specifying the visibility priority for the item.",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "doc" : "Presents a bar in the touch bar display modally and hides this item if it is present in the System Tray of the touch bar display.\n\nParameters:\n * `touchbar` - An `hs._asm.undocumented.touchbar.bar` object of the bar to display modally in the touch bar display.\n * `dismissButton` - an optional boolean, default true, specifying whether or not the system escape (or its current replacement) button should be replaced by a button to remove the modal bar from the touch bar display when pressed.\n\nReturns:\n * the touchbarItem object\n\nNotes:\n * If you specify `dismissButton` as false, then you must use `hs._asm.undocumented.touchbar.bar:minimizeModalBar` or `hs._asm.undocumented.touchbar.bar:dismissModalBar` to remove the modal bar from the touch bar display.\n   * Use `hs._asm.undocumented.touchbar.bar:minimizeModalBar` if you want the item to reappear in the System Tray (if it was present before displaying the bar).\n\n * If you do not have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences, the modal bar will only be displayed when the Hammerspoon application is the frontmost application.\n\n * This method is actually a wrapper to `hs._asm.undocumented.touchbar.bar:presentModalBar` provided for convenience.\n\n * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6.",
        "desc" : "Presents a bar in the touch bar display modally and hides this item if it is present in the System Tray of the touch bar display.",
        "def" : "hs._asm.undocumented.touchbar.item:presentModalBar(touchbar, [dismissButton]) -> touchbarItemObject",
        "stripped_doc" : [
          "Presents a bar in the touch bar display modally and hides this item if it is present in the System Tray of the touch bar display.",
          ""
        ],
        "notes" : [
          " * If you specify `dismissButton` as false, then you must use `hs._asm.undocumented.touchbar.bar:minimizeModalBar` or `hs._asm.undocumented.touchbar.bar:dismissModalBar` to remove the modal bar from the touch bar display.",
          "   * Use `hs._asm.undocumented.touchbar.bar:minimizeModalBar` if you want the item to reappear in the System Tray (if it was present before displaying the bar).",
          "",
          " * If you do not have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences, the modal bar will only be displayed when the Hammerspoon application is the frontmost application.",
          "",
          " * This method is actually a wrapper to `hs._asm.undocumented.touchbar.bar:presentModalBar` provided for convenience.",
          "",
          " * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6."
        ],
        "signature" : "hs._asm.undocumented.touchbar.item:presentModalBar(touchbar, [dismissButton]) -> touchbarItemObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarItem object",
          ""
        ],
        "name" : "presentModalBar",
        "parameters" : [
          " * `touchbar` - An `hs._asm.undocumented.touchbar.bar` object of the bar to display modally in the touch bar display.",
          " * `dismissButton` - an optional boolean, default true, specifying whether or not the system escape (or its current replacement) button should be replaced by a button to remove the modal bar from the touch bar display when pressed.",
          ""
        ]
      },
      {
        "doc" : "Get or set the label displayed for the item when the customization panel is being displayed for the touch bar.\n\nParameters:\n * `label` - an optional string, or explicit nil to reset to an empty string, specifying the label to be displayed with the item when the customization panel is being displayed for the touch bar.  Defaults to an empty string.\n\nReturns:\n * if an argument is provided, returns the touchbarItem object; otherwise returns the current value",
        "desc" : "Get or set the label displayed for the item when the customization panel is being displayed for the touch bar.",
        "def" : "hs._asm.undocumented.touchbar.item:customizationLabel([label]) -> touchbarItemObject | string",
        "stripped_doc" : [
          "Get or set the label displayed for the item when the customization panel is being displayed for the touch bar.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.item:customizationLabel([label]) -> touchbarItemObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarItem object; otherwise returns the current value"
        ],
        "name" : "customizationLabel",
        "parameters" : [
          " * `label` - an optional string, or explicit nil to reset to an empty string, specifying the label to be displayed with the item when the customization panel is being displayed for the touch bar.  Defaults to an empty string.",
          ""
        ]
      },
      {
        "doc" : "Get or set the image for a button item which was initially given an image when created.\n\nParameters:\n * `image` - an optional `hs.image` object, or explicit nil, specifying the image for the button item.\n\nReturns:\n * if an argument is provided, returns the touchbarItem object; otherwise returns the current value\n\nNotes:\n * This method will generate an error if an image was not provided when the object was created.\n * Setting the image to nil will remove the image and shrink the button, but not as tightly as the button would appear if it had been initially created without an image at all.",
        "desc" : "Get or set the image for a button item which was initially given an image when created.",
        "def" : "hs._asm.undocumented.touchbar.item:image([image]) -> touchbarItemObject | hs.image object",
        "stripped_doc" : [
          "Get or set the image for a button item which was initially given an image when created.",
          ""
        ],
        "notes" : [
          " * This method will generate an error if an image was not provided when the object was created.",
          " * Setting the image to nil will remove the image and shrink the button, but not as tightly as the button would appear if it had been initially created without an image at all."
        ],
        "signature" : "hs._asm.undocumented.touchbar.item:image([image]) -> touchbarItemObject | hs.image object",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarItem object; otherwise returns the current value",
          ""
        ],
        "name" : "image",
        "parameters" : [
          " * `image` - an optional `hs.image` object, or explicit nil, specifying the image for the button item.",
          ""
        ]
      },
      {
        "doc" : "Get or set the title for a button item which was initially given a title when created.\n\nParameters:\n * `title` - an optional string, or explicit nil, specifying the title for the button item.\n\nReturns:\n * if an argument is provided, returns the touchbarItem object; otherwise returns the current value\n\nNotes:\n * This method will generate an error if a title was not provided when the object was created.\n * Setting the title to nil will remove the title and shrink the button, but not as tightly as the button would appear if it had been initially created without a title at all.",
        "desc" : "Get or set the title for a button item which was initially given a title when created.",
        "def" : "hs._asm.undocumented.touchbar.item:title([title]) -> touchbarItemObject | string",
        "stripped_doc" : [
          "Get or set the title for a button item which was initially given a title when created.",
          ""
        ],
        "notes" : [
          " * This method will generate an error if a title was not provided when the object was created.",
          " * Setting the title to nil will remove the title and shrink the button, but not as tightly as the button would appear if it had been initially created without a title at all."
        ],
        "signature" : "hs._asm.undocumented.touchbar.item:title([title]) -> touchbarItemObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarItem object; otherwise returns the current value",
          ""
        ],
        "name" : "title",
        "parameters" : [
          " * `title` - an optional string, or explicit nil, specifying the title for the button item.",
          ""
        ]
      },
      {
        "doc" : "Returns the identifier for the touchbarItem object\n\nParameters:\n * None\n\nReturns:\n * the identifier for the item as a string",
        "desc" : "Returns the identifier for the touchbarItem object",
        "def" : "hs._asm.undocumented.touchbar.item:identifier() -> string",
        "stripped_doc" : [
          "Returns the identifier for the touchbarItem object",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.undocumented.touchbar.item:identifier() -> string",
        "type" : "Method",
        "returns" : [
          " * the identifier for the item as a string"
        ],
        "name" : "identifier",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns a boolean indicating whether or not the item is currently visible in the bar that it is assigned to.\n\nParameters:\n * None\n\nReturns:\n * a boolean specifying whether or not the item is currently visible in the bar that it is assigned to.\n\nNotes:\n * If the bar that the item is assigned to has been visible at some point in the past, and the item was visible at that time, this method will return true even if the bar is not currently visible. If you want to know if the item is visible in the touch bar display *right now*, you should use `reallyVisible = bar:isVisible() and item:isVisible()`",
        "desc" : "Returns a boolean indicating whether or not the item is currently visible in the bar that it is assigned to.",
        "def" : "hs._asm.undocumented.touchbar.item:isVisible() -> boolean",
        "stripped_doc" : [
          "Returns a boolean indicating whether or not the item is currently visible in the bar that it is assigned to.",
          ""
        ],
        "notes" : [
          " * If the bar that the item is assigned to has been visible at some point in the past, and the item was visible at that time, this method will return true even if the bar is not currently visible. If you want to know if the item is visible in the touch bar display *right now*, you should use `reallyVisible = bar:isVisible() and item:isVisible()`"
        ],
        "signature" : "hs._asm.undocumented.touchbar.item:isVisible() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean specifying whether or not the item is currently visible in the bar that it is assigned to.",
          ""
        ],
        "name" : "isVisible",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Get or set the visibility priority for the touchbar item.\n\nParameters:\n * `priority` - an optional number specifying the visibility priority for the item.\n\nReturns:\n * if an argument is provided, returns the touchbarItem object; otherwise returns the current value\n\nNotes:\n * If their are more items to be presented in the touch bar display than space permits, items with a lower visibility priority will be hidden first.\n * Some predefined visibility values are defined in [hs._asm.undocumented.touchbar.item.visibilityPriorities](#visibilityPriorities), though others are allowed. The default priority for an item object is `hs._asm.undocumented.touchbar.item.visibilityPriorities.normal`.",
        "desc" : "Get or set the visibility priority for the touchbar item.",
        "def" : "hs._asm.undocumented.touchbar.item:visibilityPriority([priority]) -> touchbarItemObject | number",
        "stripped_doc" : [
          "Get or set the visibility priority for the touchbar item.",
          ""
        ],
        "notes" : [
          " * If their are more items to be presented in the touch bar display than space permits, items with a lower visibility priority will be hidden first.",
          " * Some predefined visibility values are defined in [hs._asm.undocumented.touchbar.item.visibilityPriorities](#visibilityPriorities), though others are allowed. The default priority for an item object is `hs._asm.undocumented.touchbar.item.visibilityPriorities.normal`."
        ],
        "signature" : "hs._asm.undocumented.touchbar.item:visibilityPriority([priority]) -> touchbarItemObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarItem object; otherwise returns the current value",
          ""
        ],
        "name" : "visibilityPriority",
        "parameters" : [
          " * `priority` - an optional number specifying the visibility priority for the item.",
          ""
        ]
      },
      {
        "doc" : "Get or set the callback function for the touchbar item.\n\nParameters:\n * `fn` - an optional function, or explicit nil to remove, specifying the callback to be invoked when the item is pressed.\n\nReturns:\n * if an argument is provided, returns the touchbarItem object; otherwise returns the current value\n\nNotes:\n * The callback function should expect one argument, the touchbarItemObject, and return none.",
        "desc" : "Get or set the callback function for the touchbar item.",
        "def" : "hs._asm.undocumented.touchbar.item:callback([fn | nil]) -> touchbarItemObject | fn",
        "stripped_doc" : [
          "Get or set the callback function for the touchbar item.",
          ""
        ],
        "notes" : [
          " * The callback function should expect one argument, the touchbarItemObject, and return none."
        ],
        "signature" : "hs._asm.undocumented.touchbar.item:callback([fn | nil]) -> touchbarItemObject | fn",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the touchbarItem object; otherwise returns the current value",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - an optional function, or explicit nil to remove, specifying the callback to be invoked when the item is pressed.",
          ""
        ]
      },
      {
        "doc" : "Add or remove the touchbar item from the System Tray in the touch bar display.\n\nParameters:\n * `state` - a boolean specifying if the item should be displayed in the System Tray (true) or not (false).\n\nReturns:\n * the touchbarItem object\n\nNotes:\n * The item will only be visible in the System Tray if you have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences.\n\n * Initial experiments suggest that only one item *from any macOS application currently running* may be added to the System Tray at a time.\n * Adding a new item will hide any previous item assigned; however they do appear to stack, so removing an existing item with this method, or if it has bar object attached with [hs._asm.undocumented.touchbar.item:presentModalBar](#presentModalBar) and you dismiss the bar with `hs._asm.undocumented.touchbar.bar:dismissModalBar`, the previous item should become visible again.\n\n * At present, there is no known way to determine which item is currently displayed in the System Tray or detect when a specific item is replaced ([hs._asm.undocumented.touchbar.item:isVisible](#isVisible) returns false). Please submit an issue if you know of a solution.\n\n * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6.",
        "desc" : "Add or remove the touchbar item from the System Tray in the touch bar display.",
        "def" : "hs._asm.undocumented.touchbar.item:addToSystemTray(state) -> touchbarItemObject",
        "stripped_doc" : [
          "Add or remove the touchbar item from the System Tray in the touch bar display.",
          ""
        ],
        "notes" : [
          " * The item will only be visible in the System Tray if you have \"Touch Bar Shows\" set to \"App Controls With Control Strip\" set in the Keyboard System Preferences.",
          "",
          " * Initial experiments suggest that only one item *from any macOS application currently running* may be added to the System Tray at a time.",
          " * Adding a new item will hide any previous item assigned; however they do appear to stack, so removing an existing item with this method, or if it has bar object attached with [hs._asm.undocumented.touchbar.item:presentModalBar](#presentModalBar) and you dismiss the bar with `hs._asm.undocumented.touchbar.bar:dismissModalBar`, the previous item should become visible again.",
          "",
          " * At present, there is no known way to determine which item is currently displayed in the System Tray or detect when a specific item is replaced ([hs._asm.undocumented.touchbar.item:isVisible](#isVisible) returns false). Please submit an issue if you know of a solution.",
          "",
          " * This method uses undocumented functions and\/or framework methods and is not guaranteed to work with future updates to macOS. It has currently been tested with 10.12.6."
        ],
        "signature" : "hs._asm.undocumented.touchbar.item:addToSystemTray(state) -> touchbarItemObject",
        "type" : "Method",
        "returns" : [
          " * the touchbarItem object",
          ""
        ],
        "name" : "addToSystemTray",
        "parameters" : [
          " * `state` - a boolean specifying if the item should be displayed in the System Tray (true) or not (false).",
          ""
        ]
      }
    ],
    "name" : "hs._asm.undocumented.touchbar.item"
  }
]
