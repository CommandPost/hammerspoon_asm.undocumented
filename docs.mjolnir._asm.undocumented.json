[
  {
    "name": "mjolnir._asm.undocumented.bluetooth",
    "doc": "This submodule provides access to Bluetooth availability and its power state, and the ability to change it.\n\nThis module utilizes undocumented or unpublished functions to manipulate options and features within OS X.  These are from \"private\" api's for Mac OS X and are not guaranteed to work with any particular version of OS X or at all.  This code was based primarily on code samples and segments found at https://github.com/toy/blueutil.\n\nI make no promises that these will work for you or work at all with any, past, current, or future versions of OS X.  I can confirm only that they didn't crash my machine during testing under 10.10. You have been warned.",
    "items": [

    ]
  },
  {
    "name": "mjolnir._asm.undocumented.bluetooth",
    "doc": "This submodule provides access to Bluetooth availability and its power state, and the ability to change it.\n\nThis module utilizes undocumented or unpublished functions to manipulate options and features within OS X.  These are from \"private\" api's for Mac OS X and are not guaranteed to work with any particular version of OS X or at all.  This code was based primarily on code samples and segments found at https://github.com/toy/blueutil.\n\nI make no promises that these will work for you or work at all with any, past, current, or future versions of OS X.  I can confirm only that they didn't crash my machine during testing under 10.10. You have been warned.",
    "items": [
      {
        "type": "Function",
        "name": "available",
        "def": "mjolnir._asm.undocumented.bluetooth.available() -> bool",
        "doc": "Returns true or false, indicating whether bluetooth is available on this machine."
      },
      {
        "type": "Function",
        "name": "power",
        "def": "mjolnir._asm.undocumented.bluetooth.power([bool]) -> bool",
        "doc": "If an argument is provided, set bluetooth power state to on (true) or off (false) and returns the (possibly new) status. If no argument is provided, then this function returns true or false, indicating whether bluetooth is currently enabled for this machine."
      },
      {
        "type": "Function",
        "name": "available",
        "def": "mjolnir._asm.undocumented.bluetooth.available() -> bool",
        "doc": "Returns true or false, indicating whether bluetooth is available on this machine."
      },
      {
        "type": "Function",
        "name": "power",
        "def": "mjolnir._asm.undocumented.bluetooth.power([bool]) -> bool",
        "doc": "If an argument is provided, set bluetooth power state to on (true) or off (false) and returns the (possibly new) status. If no argument is provided, then this function returns true or false, indicating whether bluetooth is currently enabled for this machine."
      }
    ]
  },
  {
    "name": "mjolnir._asm.undocumented.cgsdebug",
    "doc": "This submodule provides access to CGSDebug related features.  Most notably, this contains the original `hydra.shadow(bool)` functionality, and a specific function is provided for just that functionality.\n\nThis module utilizes undocumented or unpublished functions to manipulate options and features within OS X.  These are from \"private\" api's for Mac OS X and are not guaranteed to work with any particular version of OS X or at all.This code was based primarily on code samples and segments found at (https://code.google.com/p/undocumented-goodness/) and (https://code.google.com/p/iterm2/source/browse/branches/0.10.x/CGSInternal/CGSDebug.h?r=2).\n\n\nI make no promises that these will work for you or work at all with any, past, current, or future versions of OS X.  I can confirm only that they didn't crash my machine during testing under 10.10. You have been warned.",
    "items": [

    ]
  },
  {
    "name": "mjolnir._asm.undocumented.cgsdebug",
    "doc": "This submodule provides access to CGSDebug related features.  Most notably, this contains the original `hydra.shadow(bool)` functionality, and a specific function is provided for just that functionality.\n\nThis module utilizes undocumented or unpublished functions to manipulate options and features within OS X.  These are from \"private\" api's for Mac OS X and are not guaranteed to work with any particular version of OS X or at all.This code was based primarily on code samples and segments found at (https://code.google.com/p/undocumented-goodness/) and (https://code.google.com/p/iterm2/source/browse/branches/0.10.x/CGSInternal/CGSDebug.h?r=2).\n\n\nI make no promises that these will work for you or work at all with any, past, current, or future versions of OS X.  I can confirm only that they didn't crash my machine during testing under 10.10. You have been warned.",
    "items": [
      {
        "type": "Function",
        "name": "cgsdebug",
        "def": "mjolnir._asm.undocumented.cgsdebug.cgsdebug.get(option) -> boolean",
        "doc": "Returns a boolean indicating whether the specified CGSDebug option is set or not where `option` is a number corresponding to a label defined in `mjolnir._asm.undocumented.cgsdebug.cgsdebug.options[]`."
      },
      {
        "type": "Function",
        "name": "cgsdebug",
        "def": "mjolnir._asm.undocumented.cgsdebug.cgsdebug.set(option, boolean)",
        "doc": "Enables (value == true) or disables (value == false) the specified CGSDebug option where `option` is a number corresponding to a label defined in `mjolnir._asm.undocumented.cgsdebug.cgsdebug.options[]`."
      },
      {
        "type": "Function",
        "name": "cgsdebug",
        "def": "mjolnir._asm.undocumented.cgsdebug.cgsdebug.clear()",
        "doc": "Clears all of the CGSDebug option flags."
      },
      {
        "type": "Function",
        "name": "cgsdebug",
        "def": "mjolnir._asm.undocumented.cgsdebug.cgsdebug.getMask() -> number",
        "doc": "Returns the numeric value representing the bitmask of all currently set CGSDebug options."
      },
      {
        "type": "Function",
        "name": "cgsdebug",
        "def": "mjolnir._asm.undocumented.cgsdebug.cgsdebug.shadow(bool)",
        "doc": "Sets whether OSX apps have shadows."
      },
      {
        "type": "Variable",
        "name": "cgsdebug",
        "def": "mjolnir._asm.undocumented.cgsdebug.cgsdebug.options[]",
        "doc": "Connivence array of all currently known debug options.\n~~~lua\n    flashScreenUpdates\n        All screen updates are flashed in yellow. Regions under a DisableUpdate are flashed in orange. Regions that are hardware accellerated are painted green.\n\n    colorByAccelleration\n        Colors windows green if they are accellerated, otherwise red. Doesn't cause things to refresh properly - leaves excess rects cluttering the screen.\n\n    noShadows\n        Disables shadows on all windows.\n\n    noDelayAfterFlash\n        Setting this disables the pause after a flash when using FlashScreenUpdates or FlashIdenticalUpdates.\n\n    autoflushDrawing\n        Flushes the contents to the screen after every drawing operation.\n\n    showMouseTrackingAreas\n        Highlights mouse tracking areas. Doesn't cause things to refresh correctly - leaves excess rectangles cluttering the screen.\n\n    flashIdenticalUpdates\n        Flashes identical updates in red.\n\n    dumpWindowListToFile\n        Dumps a list of windows to /tmp/WindowServer.winfo.out. This is what Quartz Debug uses to get the window list.\n\n    dumpConnectionListToFile\n        Dumps a list of connections to /tmp/WindowServer.cinfo.out.\n\n    verboseLogging\n        Dumps a very verbose debug log of the WindowServer to /tmp/CGLog_WinServer_&lt;PID&gt;.\n\n    verboseLoggingAllApps\n        Dumps a very verbose debug log of all processes to /tmp/CGLog_&lt;NAME&gt;_<PID>.\n\n    dumpHotKeyListToFile\n        Dumps a list of hotkeys to /tmp/WindowServer.keyinfo.out.\n\n    dumpSurfaceInfo\n        Dumps SurfaceInfo? to /tmp/WindowServer.sinfo.out\n\n    dumpOpenGLInfoToFile\n        Dumps information about OpenGL extensions, etc to /tmp/WindowServer.glinfo.out.\n\n    dumpShadowListToFile\n        Dumps a list of shadows to /tmp/WindowServer.shinfo.out.\n\n    dumpWindowListToPlist\n        Dumps a list of windows to `/tmp/WindowServer.winfo.plist`. This is what Quartz Debug on 10.5 uses to get the window list.\n\n    dumpResourceUsageToFiles\n        Dumps information about an application's resource usage to `/tmp/CGResources_&lt;NAME&gt;_&lt;PID&gt;`.\n~~~"
      },
      {
        "type": "Function",
        "name": "cgsdebug",
        "def": "mjolnir._asm.undocumented.cgsdebug.cgsdebug.get(option) -> boolean",
        "doc": "Returns a boolean indicating whether the specified CGSDebug option is set or not where `option` is a number corresponding to a label defined in `mjolnir._asm.undocumented.cgsdebug.cgsdebug.options[]`."
      },
      {
        "type": "Function",
        "name": "cgsdebug",
        "def": "mjolnir._asm.undocumented.cgsdebug.cgsdebug.set(option, boolean)",
        "doc": "Enables (value == true) or disables (value == false) the specified CGSDebug option where `option` is a number corresponding to a label defined in `mjolnir._asm.undocumented.cgsdebug.cgsdebug.options[]`."
      },
      {
        "type": "Function",
        "name": "cgsdebug",
        "def": "mjolnir._asm.undocumented.cgsdebug.cgsdebug.clear()",
        "doc": "Clears all of the CGSDebug option flags."
      },
      {
        "type": "Function",
        "name": "cgsdebug",
        "def": "mjolnir._asm.undocumented.cgsdebug.cgsdebug.getMask() -> number",
        "doc": "Returns the numeric value representing the bitmask of all currently set CGSDebug options."
      },
      {
        "type": "Function",
        "name": "cgsdebug",
        "def": "mjolnir._asm.undocumented.cgsdebug.cgsdebug.shadow(bool)",
        "doc": "Sets whether OSX apps have shadows."
      },
      {
        "type": "Variable",
        "name": "cgsdebug",
        "def": "mjolnir._asm.undocumented.cgsdebug.cgsdebug.options[]",
        "doc": "Connivence array of all currently known debug options.\n~~~lua\n    flashScreenUpdates\n        All screen updates are flashed in yellow. Regions under a DisableUpdate are flashed in orange. Regions that are hardware accellerated are painted green.\n\n    colorByAccelleration\n        Colors windows green if they are accellerated, otherwise red. Doesn't cause things to refresh properly - leaves excess rects cluttering the screen.\n\n    noShadows\n        Disables shadows on all windows.\n\n    noDelayAfterFlash\n        Setting this disables the pause after a flash when using FlashScreenUpdates or FlashIdenticalUpdates.\n\n    autoflushDrawing\n        Flushes the contents to the screen after every drawing operation.\n\n    showMouseTrackingAreas\n        Highlights mouse tracking areas. Doesn't cause things to refresh correctly - leaves excess rectangles cluttering the screen.\n\n    flashIdenticalUpdates\n        Flashes identical updates in red.\n\n    dumpWindowListToFile\n        Dumps a list of windows to /tmp/WindowServer.winfo.out. This is what Quartz Debug uses to get the window list.\n\n    dumpConnectionListToFile\n        Dumps a list of connections to /tmp/WindowServer.cinfo.out.\n\n    verboseLogging\n        Dumps a very verbose debug log of the WindowServer to /tmp/CGLog_WinServer_&lt;PID&gt;.\n\n    verboseLoggingAllApps\n        Dumps a very verbose debug log of all processes to /tmp/CGLog_&lt;NAME&gt;_<PID>.\n\n    dumpHotKeyListToFile\n        Dumps a list of hotkeys to /tmp/WindowServer.keyinfo.out.\n\n    dumpSurfaceInfo\n        Dumps SurfaceInfo? to /tmp/WindowServer.sinfo.out\n\n    dumpOpenGLInfoToFile\n        Dumps information about OpenGL extensions, etc to /tmp/WindowServer.glinfo.out.\n\n    dumpShadowListToFile\n        Dumps a list of shadows to /tmp/WindowServer.shinfo.out.\n\n    dumpWindowListToPlist\n        Dumps a list of windows to `/tmp/WindowServer.winfo.plist`. This is what Quartz Debug on 10.5 uses to get the window list.\n\n    dumpResourceUsageToFiles\n        Dumps information about an application's resource usage to `/tmp/CGResources_&lt;NAME&gt;_&lt;PID&gt;`.\n~~~"
      }
    ]
  },
  {
    "name": "mjolnir._asm.undocumented.coredock",
    "doc": "This module provides access to CoreDock related features.  This allows you to adjust the Dock's position, pinning, hiding, magnification and animation settings.\n\nThis module utilizes undocumented or unpublished functions to manipulate options and features within OS X.  These are from \"private\" api's for Mac OS X and are not guaranteed to work with any particular version of OS X or at all.This code was based primarily on code samples and segments found at (https://code.google.com/p/undocumented-goodness/) and (https://code.google.com/p/iterm2/source/browse/branches/0.10.x/CGSInternal/CGSDebug.h?r=2).\n\nI make no promises that these will work for you or work at all with any, past, current, or future versions of OS X.  I can confirm only that they didn't crash my machine during testing under 10.10. You have been warned.\n\nNote that the top orientation and dock pinning has not been supported even within the private APIs for some time and may disappear from here in a future release unless another solution can be found.  It is provided here for testing and to encourage suggestions if someone is aware of a solution that has not yet been tried.",
    "items": [

    ]
  },
  {
    "name": "mjolnir._asm.undocumented.coredock",
    "doc": "This module provides access to CoreDock related features.  This allows you to adjust the Dock's position, pinning, hiding, magnification and animation settings.\n\nThis module utilizes undocumented or unpublished functions to manipulate options and features within OS X.  These are from \"private\" api's for Mac OS X and are not guaranteed to work with any particular version of OS X or at all.This code was based primarily on code samples and segments found at (https://code.google.com/p/undocumented-goodness/) and (https://code.google.com/p/iterm2/source/browse/branches/0.10.x/CGSInternal/CGSDebug.h?r=2).\n\nI make no promises that these will work for you or work at all with any, past, current, or future versions of OS X.  I can confirm only that they didn't crash my machine during testing under 10.10. You have been warned.\n\nNote that the top orientation and dock pinning has not been supported even within the private APIs for some time and may disappear from here in a future release unless another solution can be found.  It is provided here for testing and to encourage suggestions if someone is aware of a solution that has not yet been tried.",
    "items": [
      {
        "type": "Function",
        "name": "restartDock",
        "def": "mjolnir._asm.undocumented.coredock.restartDock()",
        "doc": "This function restarts the user's Dock instance.  This is not required for any of the functionality of this module, but does come in handy if your dock gets \"misplaced\" when you change monitor resolution or detach an external monitor (I've seen this occasionally when the Dock is on the left or right.)"
      },
      {
        "type": "Function",
        "name": "tileSize",
        "def": "mjolnir._asm.undocumented.coredock.tileSize([float]) -> float",
        "doc": "If an argument is provided, set the Dock icon tile size to a number between 0.0 and 1.0 and return the (possibly new) tile size.  If no argument is provided, then this function returns the current tile size as a number between 0.0 and 1.0."
      },
      {
        "type": "Function",
        "name": "magnificationSize",
        "def": "mjolnir._asm.undocumented.coredock.magnificationSize([float]) -> float",
        "doc": "If an argument is provided, set the Dock icon magnification size to a number between 0.0 and 1.0 and return the (possibly new) magnification size.  If no argument is provided, then this function returns the current magnification size as a number between 0.0 and 1.0."
      },
      {
        "type": "Function",
        "name": "orientation",
        "def": "mjolnir._asm.undocumented.coredock.orientation([orientation]) -> orientation",
        "doc": "If an argument is provided, set the Dock orientation to the position indicated by orientation number and return the (possibly new) orientation number.  If no argument is provided, then this function returns the current orientation number. You can reference `mjolnir._asm.undocumented.coredock.options.orientation` to select the appropriate number for the desired orientation or dereference the result."
      },
      {
        "type": "Function",
        "name": "pinning",
        "def": "mjolnir._asm.undocumented.coredock.pinning([pinning]) -> pinning",
        "doc": "If an argument is provided, set the Dock pinning to the position indicated by pinning number and return the (possibly new) pinning number.  If no argument is provided, then this function returns the current pinning number. You can reference `mjolnir._asm.undocumented.coredock.options.pinning` to select the appropriate number for the desired pinning or dereference the result."
      },
      {
        "type": "Function",
        "name": "magnification",
        "def": "mjolnir._asm.undocumented.coredock.magnification([bool]) -> bool",
        "doc": "If an argument is provided, set the Dock Magnification state to on or off and return the (possibly new) magnification state.  If no argument is provided, then this function returns the current magnification state."
      },
      {
        "type": "Function",
        "name": "autoHide",
        "def": "mjolnir._asm.undocumented.coredock.autoHide([bool]) -> bool",
        "doc": "If an argument is provided, set the Dock Hiding state to on or off and return the (possibly new) hiding state.  If no argument is provided, then this function returns the current hiding state."
      },
      {
        "type": "Function",
        "name": "animationEffect",
        "def": "mjolnir._asm.undocumented.coredock.animationEffect([effect]) -> effect",
        "doc": "If an argument is provided, set the Dock hiding animation effect to the effect indicated by effect number and return the (possibly new) effect number.  If no argument is provided, then this function returns the current effect number. You can reference `mjolnir._asm.undocumented.coredock.options.effect` to select the appropriate number for the desired effect or dereference the result."
      },
      {
        "type": "Variable",
        "name": "options",
        "def": "mjolnir._asm.undocumented.coredock.options[]",
        "doc": "Connivence array of all currently defined coredock options.\n~~~lua\n    Note that the top orientation has not been supported even within the private APIs for some time and may disappear from here in a future release unless another solution can be found.\n\n    options.orientation[]  -- an array of the orientation options available for `orientation`\n        top         -- put the dock at the top of the monitor\n        bottom      -- put the dock at the bottom of the monitor\n        left        -- put the dock at the left of the monitor\n        right       -- put the dock at the right of the monitor\n\n    Note that dock pinning has not been supported even within the private APIs for some time and may disappear from here in a future release unless another solution can be found.\n\n    options.pinning[]  -- an array of the pinning options available for `pinning`\n        start       -- pin the dock at the start of its orientation\n        middle      -- pin the dock at the middle of its orientation\n        end         -- pin the dock at the end of its orientation\n\n    Note that the suck animation is not displayed in the System Preferences panel correctly, but does remain in effect as long as you do not change this specific field while in the Preferences panel for the Dock.\n\n    options.effect[]   -- an array of the dock animation options for  `animation_effect`\n        genie       -- use the genie animation\n        scale       -- use the scale animation\n        suck        -- use the suck animation\n~~~"
      },
      {
        "type": "Function",
        "name": "restartDock",
        "def": "mjolnir._asm.undocumented.coredock.restartDock()",
        "doc": "This function restarts the user's Dock instance.  This is not required for any of the functionality of this module, but does come in handy if your dock gets \"misplaced\" when you change monitor resolution or detach an external monitor (I've seen this occasionally when the Dock is on the left or right.)"
      },
      {
        "type": "Function",
        "name": "tileSize",
        "def": "mjolnir._asm.undocumented.coredock.tileSize([float]) -> float",
        "doc": "If an argument is provided, set the Dock icon tile size to a number between 0.0 and 1.0 and return the (possibly new) tile size.  If no argument is provided, then this function returns the current tile size as a number between 0.0 and 1.0."
      },
      {
        "type": "Function",
        "name": "magnificationSize",
        "def": "mjolnir._asm.undocumented.coredock.magnificationSize([float]) -> float",
        "doc": "If an argument is provided, set the Dock icon magnification size to a number between 0.0 and 1.0 and return the (possibly new) magnification size.  If no argument is provided, then this function returns the current magnification size as a number between 0.0 and 1.0."
      },
      {
        "type": "Function",
        "name": "orientation",
        "def": "mjolnir._asm.undocumented.coredock.orientation([orientation]) -> orientation",
        "doc": "If an argument is provided, set the Dock orientation to the position indicated by orientation number and return the (possibly new) orientation number.  If no argument is provided, then this function returns the current orientation number. You can reference `mjolnir._asm.undocumented.coredock.options.orientation` to select the appropriate number for the desired orientation or dereference the result."
      },
      {
        "type": "Function",
        "name": "pinning",
        "def": "mjolnir._asm.undocumented.coredock.pinning([pinning]) -> pinning",
        "doc": "If an argument is provided, set the Dock pinning to the position indicated by pinning number and return the (possibly new) pinning number.  If no argument is provided, then this function returns the current pinning number. You can reference `mjolnir._asm.undocumented.coredock.options.pinning` to select the appropriate number for the desired pinning or dereference the result."
      },
      {
        "type": "Function",
        "name": "magnification",
        "def": "mjolnir._asm.undocumented.coredock.magnification([bool]) -> bool",
        "doc": "If an argument is provided, set the Dock Magnification state to on or off and return the (possibly new) magnification state.  If no argument is provided, then this function returns the current magnification state."
      },
      {
        "type": "Function",
        "name": "autoHide",
        "def": "mjolnir._asm.undocumented.coredock.autoHide([bool]) -> bool",
        "doc": "If an argument is provided, set the Dock Hiding state to on or off and return the (possibly new) hiding state.  If no argument is provided, then this function returns the current hiding state."
      },
      {
        "type": "Function",
        "name": "animationEffect",
        "def": "mjolnir._asm.undocumented.coredock.animationEffect([effect]) -> effect",
        "doc": "If an argument is provided, set the Dock hiding animation effect to the effect indicated by effect number and return the (possibly new) effect number.  If no argument is provided, then this function returns the current effect number. You can reference `mjolnir._asm.undocumented.coredock.options.effect` to select the appropriate number for the desired effect or dereference the result."
      },
      {
        "type": "Variable",
        "name": "options",
        "def": "mjolnir._asm.undocumented.coredock.options[]",
        "doc": "Connivence array of all currently defined coredock options.\n~~~lua\n    Note that the top orientation has not been supported even within the private APIs for some time and may disappear from here in a future release unless another solution can be found.\n\n    options.orientation[]  -- an array of the orientation options available for `orientation`\n        top         -- put the dock at the top of the monitor\n        bottom      -- put the dock at the bottom of the monitor\n        left        -- put the dock at the left of the monitor\n        right       -- put the dock at the right of the monitor\n\n    Note that dock pinning has not been supported even within the private APIs for some time and may disappear from here in a future release unless another solution can be found.\n\n    options.pinning[]  -- an array of the pinning options available for `pinning`\n        start       -- pin the dock at the start of its orientation\n        middle      -- pin the dock at the middle of its orientation\n        end         -- pin the dock at the end of its orientation\n\n    Note that the suck animation is not displayed in the System Preferences panel correctly, but does remain in effect as long as you do not change this specific field while in the Preferences panel for the Dock.\n\n    options.effect[]   -- an array of the dock animation options for  `animation_effect`\n        genie       -- use the genie animation\n        scale       -- use the scale animation\n        suck        -- use the suck animation\n~~~"
      }
    ]
  },
  {
    "name": "mjolnir._asm.undocumented.spaces",
    "doc": "This module provides the functionality, as it was in Hydra and Mjolnir, for `spaces`.\n\nThese functions utilize private API's within the OS X internals, and are known to have unpredictable behavior under Mavericks and Yosemite when \"Displays have separate Spaces\" is checked under the Mission Control system preferences.\n\nThis module is based primarily on code from the previous incarnation of Mjolnir by [Steven Degutis](https://github.com/sdegutis/).",
    "items": [

    ]
  },
  {
    "name": "mjolnir._asm.undocumented.spaces",
    "doc": "This module provides the functionality, as it was in Hydra and Mjolnir, for `spaces`.\n\nThese functions utilize private API's within the OS X internals, and are known to have unpredictable behavior under Mavericks and Yosemite when \"Displays have separate Spaces\" is checked under the Mission Control system preferences.\n\nThis module is based primarily on code from the previous incarnation of Mjolnir by [Steven Degutis](https://github.com/sdegutis/).",
    "items": [
      {
        "type": "Function",
        "name": "count",
        "def": "mjolnir._asm.undocumented.spaces.count() -> number",
        "doc": "The number of spaces you currently have."
      },
      {
        "type": "Function",
        "name": "currentSpace",
        "def": "mjolnir._asm.undocumented.spaces.currentSpace() -> number",
        "doc": "The index of the space you're currently on, 1-indexed (as usual)."
      },
      {
        "type": "Function",
        "name": "moveToSpace",
        "def": "mjolnir._asm.undocumented.spaces.moveToSpace(number)",
        "doc": "Switches to the space at the given index, 1-indexed (as usual)."
      },
      {
        "type": "Function",
        "name": "count",
        "def": "mjolnir._asm.undocumented.spaces.count() -> number",
        "doc": "The number of spaces you currently have."
      },
      {
        "type": "Function",
        "name": "currentSpace",
        "def": "mjolnir._asm.undocumented.spaces.currentSpace() -> number",
        "doc": "The index of the space you're currently on, 1-indexed (as usual)."
      },
      {
        "type": "Function",
        "name": "moveToSpace",
        "def": "mjolnir._asm.undocumented.spaces.moveToSpace(number)",
        "doc": "Switches to the space at the given index, 1-indexed (as usual)."
      }
    ]
  }
]
